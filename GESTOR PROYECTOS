import React, { useState, useMemo, useCallback, useEffect } from 'react';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area } from 'recharts';
import { Upload, FileText, Filter, X, Download, ArrowLeft, AlertTriangle, CheckCircle, Clock, Users, TrendingUp, Calendar, Target, BarChart3, RefreshCw, Activity, UserCheck, Zap, Info, Settings, Brain, Lightbulb } from 'lucide-react';
import Papa from 'papaparse';

// ===============================
// CONSTANTES DEL SISTEMA ORIGINAL (SIN CAMBIOS)
// ===============================

const STATE_CATEGORIES = {
  'finalizados': ['DONE', 'Pase Produccion', 'Completado', 'Finalizada', 'Completada'],
  'enProceso': ['ANALISIS', 'DEV', 'UAT', 'En curso', 'En pausa', 'En planificacion-analisis', 'En implementación', 'En Planificación'], 
  'enAprobacion': ['Aprobacion Diseño Negocio', 'APROBACION DISEÑO TECNICO'],
  'enDiseno': ['SOLUTIONS'],
  'aPriorizar': ['PRIORIZAR', 'Prioridad 1', 'Planificación', 'Planning-Interno', 'backlog', 'Por Analizar'],
  'bocaBacklog': ['Highest', 'Por analizar', 'Priorizado', 'Analizada - Por implementar'],
  'cancelados': ['Cancelada', 'Analizada - Descartada', 'Duplicada']
};

const VALID_COUNTRIES = ['GT', 'RG', 'CR', 'SV', 'MX', 'AK', 'PX'];

const CSV_URL = 'https://raw.githubusercontent.com/andrescoto-cpu/metadata/main/scripts/METADATA%20BM.csv';

const stateColors = {
  'DONE': '#10B981',
  'Pase Produccion': '#059669',
  'Completado': '#34D399',
  'ANALISIS': '#3B82F6',
  'DEV': '#1D4ED8',
  'UAT': '#60A5FA',
  'SOLUTIONS': '#8B5CF6',
  'PRIORIZAR': '#F59E0B',
  'Highest': '#EF4444',
  'default': '#6B7280'
};

const countryNames = {
  'GT': 'Guatemala',
  'RG': 'Regional',
  'CR': 'Costa Rica', 
  'SV': 'El Salvador',
  'MX': 'México',
  'AK': 'Akros',
  'PX': 'PEX'
};

// ===============================
// CONFIGURACIÓN DE SCORING (NUEVO)
// ===============================

const SCORING_CONFIG = {
  weights: {
    business: 0.40,
    technology: 0.25, 
    sizing: 0.20,
    state: 0.15
  },
  businessValues: {
    '1. Riesgo/Regulatorio': 100,
    '2. Aumento de ingresos': 80,
    '3. Mejora de servicio (percibido por cliente)': 60,
    '4. Reducción de gasto': 40,
    '5. Mejora tecnológica': 20
  },
  technologyValues: {
    '1. Regulatorio': 100,
    '4. Ciberseguridad': 90,
    '2. Nuevo Feature': 60,
    '5. Soporte Nivel 2 (Escalación de soporte a Desarrollo)': 40,
    '3. Refactor': 20
  },
  sizingValues: {
    'XS': 100, // 1 semana - Quick wins
    'S': 80,   // 2 semanas  
    'M': 60,   // 3 semanas
    'L': 30,   // 5-6 semanas
    'XL': 10   // 6+ semanas
  },
  stateValues: {
    'PRIORIZAR': 100,
    'ANALISIS': 90,
    'APROBACION DISEÑO TECNICO': 70,
    'SOLUTIONS': 60,
    'DEV': 50,
    'UAT': 40,
    'Pase Produccion': 20
  }
};

const SCORING_STATE_CATEGORIES = {
  target: {
    // En Proceso
    process: ['DEV', 'UAT', 'Pase Produccion'],
    // Aprobación  
    approval: ['APROBACION DISEÑO TECNICO', 'Aprobacion Diseño Negocio'],
    // A Priorizar
    priority: ['PRIORIZAR', 'Highest', 'Prioridad 1']
  },
  excluded: {
    // Boca Backlog
    backlog: ['ANALISIS', 'Planificación', 'Planning-Interno', 'Ingreso'],
    // Diseño
    design: ['SOLUTIONS'],
    // Finalizados (nunca se muestran)
    finalized: ['DONE', 'Completado']
  }
};

// ===============================
// UTILIDADES DE SCORING (NUEVO)
// ===============================

const ScoringUtils = {
  // Calcular score inteligente
  calculateIntelligentScore: (item, config = SCORING_CONFIG) => {
    if (!item) return 0;
    
    let score = 0;
    
    // Valoración Negocio (40%)
    const businessScore = config.businessValues[item['Valoración prioridad Negocio']] || 0;
    score += businessScore * config.weights.business;
    
    // Valoración Tecnología (25%)
    const techScore = config.technologyValues[item['Valoración Prioridad Tecnología']] || 0;
    score += techScore * config.weights.technology;
    
    // Sizing Inverso (20%)
    const sizingScore = config.sizingValues[item.Sizing] || 0;
    score += sizingScore * config.weights.sizing;
    
    // Estado (15%)
    const stateScore = config.stateValues[item.Estado] || 0;
    score += stateScore * config.weights.state;
    
    return Math.round(score);
  },

  // Filtrar proyectos por categoría
  filterProjectsByCategory: (data, categories = SCORING_STATE_CATEGORIES) => {
    const targetStates = [
      ...categories.target.process,
      ...categories.target.approval, 
      ...categories.target.priority
    ];
    
    return data.filter(item => 
      item && item.state && targetStates.includes(item.state)
    );
  },

  // Obtener estadísticas
  getProjectStats: (data, categories = SCORING_STATE_CATEGORIES) => {
    const total = data.length;
    const targetStates = [
      ...categories.target.process,
      ...categories.target.approval,
      ...categories.target.priority
    ];
    
    const processApprovalCount = data.filter(item => 
      item && item.state && targetStates.includes(item.state)
    ).length;
    
    const backlogDesignCount = data.filter(item => 
      item && item.state && [
        ...categories.excluded.backlog,
        ...categories.excluded.design
      ].includes(item.state)
    ).length;
    
    const finalizedCount = data.filter(item => 
      item && item.state && categories.excluded.finalized.includes(item.state)
    ).length;
    
    return {
      total,
      processApproval: processApprovalCount,
      backlogDesign: backlogDesignCount,
      finalized: finalizedCount
    };
  }
};

// ===============================
// COMPONENTES ORIGINALES (SIN CAMBIOS)
// ===============================

// Componente de carga con progreso
const LoadingProgress = ({ progress, message }) => {
  const stages = [
    { percent: 5, message: "Conectando con el servidor..." },
    { percent: 15, message: "Descargando datos..." },
    { percent: 35, message: "Analizando estructura..." },
    { percent: 55, message: "Procesando registros..." },
    { percent: 80, message: "Calculando métricas..." },
    { percent: 95, message: "Finalizando dashboard..." },
    { percent: 100, message: "Completado!" }
  ];
  
  const currentStage = stages.find(s => s.percent >= progress) || stages[stages.length - 1];
  const displayMessage = message || currentStage.message;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4">
        <div className="text-center">
          <div className="relative w-24 h-24 mx-auto mb-6">
            <svg className="w-24 h-24 transform -rotate-90" viewBox="0 0 100 100">
              <circle
                cx="50"
                cy="50"
                r="45"
                stroke="#E5E7EB"
                strokeWidth="6"
                fill="none"
              />
              <circle
                cx="50"
                cy="50"
                r="45"
                stroke="#3B82F6"
                strokeWidth="6"
                fill="none"
                strokeDasharray={`${2 * Math.PI * 45}`}
                strokeDashoffset={`${2 * Math.PI * 45 * (1 - progress / 100)}`}
                strokeLinecap="round"
                className="transition-all duration-300"
              />
            </svg>
            <div className="absolute inset-0 flex items-center justify-center">
              <span className="text-xl font-bold text-gray-800">{Math.round(progress)}%</span>
            </div>
          </div>
          <h3 className="text-lg font-semibold text-gray-800 mb-2">Cargando datos</h3>
          <p className="text-gray-600">{displayMessage}</p>
        </div>
      </div>
    </div>
  );
};

// Utilidades
const parseDate = (dateStr) => {
  if (!dateStr || dateStr === 'null' || dateStr === '#N/A' || dateStr === '') return null;
  
  const cleanStr = String(dateStr).trim();
  if (!cleanStr) return null;
  
  // DD/MM/YYYY format
  const ddmmyyyy = cleanStr.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
  if (ddmmyyyy) {
    const [, day, month, year] = ddmmyyyy;
    const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
    if (date.getFullYear() >= 2020 && date.getFullYear() <= 2030) {
      return date;
    }
  }
  
  const standardDate = new Date(cleanStr);
  if (!isNaN(standardDate.getTime()) && standardDate.getFullYear() >= 2020) {
    return standardDate;
  }
  
  return null;
};

const isValidEpic = (epic) => {
  if (!epic || epic === 'Sin épica' || epic === '#N/A' || epic === 'N/A' || epic === 'null') return false;
  if (typeof epic !== 'string') return false;
  if (epic.length < 3) return false;
  if (/^\d+$/.test(epic)) return false;
  if (/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(epic)) return false;
  return true;
};

const identifyRealAreas = (areas) => {
  return areas.filter(area => {
    if (!area || typeof area !== 'string') return false;
    if (area === '#N/A') return false;
    return true;
  });
};

// Componente para enlace a Jira
const JiraLink = ({ ticketKey, className = "", children }) => {
  if (!ticketKey) {
    return <span className={className}>{children || 'Sin clave'}</span>;
  }
  
  return (
    <a 
      href={`https://akros.atlassian.net/browse/${ticketKey}`}
      target="_blank"
      rel="noopener noreferrer"
      className={`text-blue-600 hover:text-blue-800 hover:underline transition-colors ${className}`}
      title={`Abrir ${ticketKey} en Jira`}
    >
      {children || ticketKey}
    </a>
  );
};

// Componente para visualizar tickets con diferentes configuraciones
const TicketViewer = ({ 
  tickets, 
  title, 
  showDateField, 
  dateFieldLabel = 'Fecha', 
  emptyMessage = 'No hay elementos para mostrar',
  borderColor = 'border-gray-500',
  bgColor = 'bg-gray-50'
}) => {
  if (!tickets || tickets.length === 0) {
    return (
      <div className="text-center py-6 text-gray-500 text-sm">
        {emptyMessage}
      </div>
    );
  }

  return (
    <div className="space-y-2 max-h-[60vh] overflow-y-auto">
      {tickets.map((item, index) => (
        <div key={index} className={`${bgColor} rounded-lg p-3 border-l-4 ${borderColor}`}>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            <div>
              <p className="text-xs font-medium text-gray-600">Clave</p>
              <JiraLink ticketKey={item.key} className="font-semibold text-sm" />
            </div>
            <div>
              <p className="text-xs font-medium text-gray-600">Estado</p>
              <p className="font-semibold text-sm" style={{color: stateColors[item.state] || stateColors.default}}>
                {item.state}
              </p>
            </div>
            <div>
              <p className="text-xs font-medium text-gray-600">País</p>
              <p className="font-semibold text-sm">{countryNames[item.country] || item.country}</p>
            </div>
            {showDateField && item[showDateField] && (
              <div>
                <p className="text-xs font-medium text-gray-600">{dateFieldLabel}</p>
                <p className="font-semibold text-green-600 text-sm">
                  {item[showDateField].toLocaleDateString('es-ES')}
                </p>
              </div>
            )}
            {item.assignee && (
              <div>
                <p className="text-xs font-medium text-gray-600">Asignado</p>
                <p className="font-semibold text-sm text-blue-600">{item.assignee}</p>
              </div>
            )}
            {item.priority && ['Highest', 'High'].includes(item.priority) && (
              <div>
                <p className="text-xs font-medium text-gray-600">Prioridad</p>
                <p className="font-semibold text-sm text-red-600">{item.priority}</p>
              </div>
            )}
            <div className="md:col-span-3">
              <p className="text-xs font-medium text-gray-600">Resumen</p>
              <p className="text-gray-800 text-xs leading-relaxed">{item.summary || 'Sin resumen disponible'}</p>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

// Módulo Dashboard (ORIGINAL - SIN CAMBIOS)
const DashboardModule = ({ data }) => {
  const metrics = useMemo(() => {
    const total = data.length;
    const completados = data.filter(item => STATE_CATEGORIES.finalizados.includes(item.state)).length;
    const enProceso = data.filter(item => STATE_CATEGORIES.enProceso.includes(item.state)).length;
    const enAprobacion = data.filter(item => STATE_CATEGORIES.enAprobacion.includes(item.state)).length;
    const enDiseno = data.filter(item => STATE_CATEGORIES.enDiseno.includes(item.state)).length;
    const aPriorizar = data.filter(item => STATE_CATEGORIES.aPriorizar.includes(item.state)).length;
    const bocaBacklog = data.filter(item => STATE_CATEGORIES.bocaBacklog.includes(item.state)).length;
    const cancelados = data.filter(item => STATE_CATEGORIES.cancelados.includes(item.state)).length;
    
    const allCategorizedStates = Object.values(STATE_CATEGORIES).flat();
    const sinCategorizar = data.filter(item => !allCategorizedStates.includes(item.state));
    const otros = sinCategorizar.length;

    return { 
      total, 
      completados, 
      enProceso, 
      enAprobacion, 
      enDiseno,
      aPriorizar,
      bocaBacklog,
      cancelados,
      otros
    };
  }, [data]);

  const regionalMatrix = useMemo(() => {
    const allCategorizedStates = Object.values(STATE_CATEGORIES).flat();
    
    return VALID_COUNTRIES.map(country => {
      const countryData = data.filter(item => item.country === country);
      const total = countryData.length;
      const completados = countryData.filter(item => STATE_CATEGORIES.finalizados.includes(item.state)).length;
      const enProceso = countryData.filter(item => STATE_CATEGORIES.enProceso.includes(item.state)).length;
      const enAprobacion = countryData.filter(item => STATE_CATEGORIES.enAprobacion.includes(item.state)).length;
      const enDiseno = countryData.filter(item => STATE_CATEGORIES.enDiseno.includes(item.state)).length;
      const aPriorizar = countryData.filter(item => STATE_CATEGORIES.aPriorizar.includes(item.state)).length;
      const bocaBacklog = countryData.filter(item => STATE_CATEGORIES.bocaBacklog.includes(item.state)).length;
      const cancelados = countryData.filter(item => STATE_CATEGORIES.cancelados.includes(item.state)).length;
      const otros = countryData.filter(item => !allCategorizedStates.includes(item.state)).length;
      const porcentaje = total > 0 ? Math.round((completados / total) * 100) : 0;

      return {
        country,
        name: countryNames[country],
        total,
        completados,
        enProceso,
        enAprobacion,
        enDiseno,
        aPriorizar,
        bocaBacklog,
        cancelados,
        otros,
        porcentaje
      };
    });
  }, [data]);

  const statesChart = useMemo(() => {
    const groupCount = {
      'Finalizados': 0,
      'En Proceso': 0,
      'Aprobación': 0,
      'Diseño': 0,
      'A Priorizar': 0,
      'Boca Backlog': 0,
      'Cancelados': 0,
      'Otros': 0
    };

    const groupColors = {
      'Finalizados': '#10B981',
      'En Proceso': '#3B82F6', 
      'Aprobación': '#8B5CF6',
      'Diseño': '#EC4899',
      'A Priorizar': '#F59E0B',
      'Boca Backlog': '#F97316',
      'Cancelados': '#EF4444',
      'Otros': '#6B7280'
    };

    data.forEach(item => {
      if (STATE_CATEGORIES.finalizados.includes(item.state)) {
        groupCount['Finalizados']++;
      } else if (STATE_CATEGORIES.enProceso.includes(item.state)) {
        groupCount['En Proceso']++;
      } else if (STATE_CATEGORIES.enAprobacion.includes(item.state)) {
        groupCount['Aprobación']++;
      } else if (STATE_CATEGORIES.enDiseno.includes(item.state)) {
        groupCount['Diseño']++;
      } else if (STATE_CATEGORIES.aPriorizar.includes(item.state)) {
        groupCount['A Priorizar']++;
      } else if (STATE_CATEGORIES.bocaBacklog.includes(item.state)) {
        groupCount['Boca Backlog']++;
      } else if (STATE_CATEGORIES.cancelados.includes(item.state)) {
        groupCount['Cancelados']++;
      } else {
        groupCount['Otros']++;
      }
    });

    return Object.entries(groupCount)
      .filter(([, count]) => count > 0)
      .map(([group, count]) => ({
        name: group,
        value: count,
        color: groupColors[group]
      }))
      .sort((a, b) => b.value - a.value);
  }, [data]);

  const epicsChart = useMemo(() => {
    const epicCount = {};
    data.forEach(item => {
      if (isValidEpic(item.epic)) {
        if (!epicCount[item.epic]) {
          epicCount[item.epic] = {
            name: item.epic,
            total: 0,
            finalizados: 0,
            enProceso: 0,
            otros: 0,
            completionRate: 0
          };
        }
        
        epicCount[item.epic].total++;
        
        if (STATE_CATEGORIES.finalizados.includes(item.state)) {
          epicCount[item.epic].finalizados++;
        } else if (STATE_CATEGORIES.enProceso.includes(item.state)) {
          epicCount[item.epic].enProceso++;
        } else {
          epicCount[item.epic].otros++;
        }
      }
    });

    Object.values(epicCount).forEach(epic => {
      epic.completionRate = epic.total > 0 ? Math.round((epic.finalizados / epic.total) * 100) : 0;
    });

    return Object.values(epicCount)
      .sort((a, b) => b.total - a.total)
      .slice(0, 10);
  }, [data]);

  return (
    <div className="space-y-6">
      {/* KPIs principales */}
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-9 gap-3">
        <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-3 border-l-4 border-blue-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-blue-600">Total</p>
              <p className="text-xl font-bold text-blue-800">{metrics.total}</p>
            </div>
            <BarChart3 className="h-6 w-6 text-blue-500" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-3 border-l-4 border-green-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-green-600">Completados</p>
              <p className="text-xl font-bold text-green-800">{metrics.completados}</p>
            </div>
            <CheckCircle className="h-6 w-6 text-green-500" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-indigo-50 to-indigo-100 rounded-lg p-3 border-l-4 border-indigo-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-indigo-600">En Proceso</p>
              <p className="text-xl font-bold text-indigo-800">{metrics.enProceso}</p>
            </div>
            <Clock className="h-6 w-6 text-indigo-500" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-3 border-l-4 border-purple-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-purple-600">Aprobación</p>
              <p className="text-xl font-bold text-purple-800">{metrics.enAprobacion}</p>
            </div>
            <Users className="h-6 w-6 text-purple-500" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-pink-50 to-pink-100 rounded-lg p-3 border-l-4 border-pink-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-pink-600">Diseño</p>
              <p className="text-xl font-bold text-pink-800">{metrics.enDiseno}</p>
            </div>
            <Target className="h-6 w-6 text-pink-500" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-yellow-50 to-yellow-100 rounded-lg p-3 border-l-4 border-yellow-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-yellow-600">A Priorizar</p>
              <p className="text-xl font-bold text-yellow-800">{metrics.aPriorizar}</p>
            </div>
            <TrendingUp className="h-6 w-6 text-yellow-500" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg p-3 border-l-4 border-orange-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-orange-600">Boca Backlog</p>
              <p className="text-xl font-bold text-orange-800">{metrics.bocaBacklog}</p>
            </div>
            <AlertTriangle className="h-6 w-6 text-orange-500" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg p-3 border-l-4 border-gray-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-gray-600">Otros</p>
              <p className="text-xl font-bold text-gray-800">{metrics.otros}</p>
            </div>
            <FileText className="h-6 w-6 text-gray-500" />
          </div>
        </div>

        <div className="bg-gradient-to-br from-red-50 to-red-100 rounded-lg p-3 border-l-4 border-red-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-red-600">Cancelados</p>
              <p className="text-xl font-bold text-red-800">{metrics.cancelados}</p>
            </div>
            <X className="h-6 w-6 text-red-500" />
          </div>
        </div>
      </div>

      {/* Matriz Regional */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">Matriz Regional</h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="text-left py-3 px-4 font-semibold text-gray-700">País</th>
                <th className="text-center py-3 px-4 font-semibold text-gray-700">Total</th>
                <th className="text-center py-3 px-4 font-semibold text-green-700">Finalizados</th>
                <th className="text-center py-3 px-4 font-semibold text-blue-700">En Proceso</th>
                <th className="text-center py-3 px-4 font-semibold text-purple-700">Aprobación</th>
                <th className="text-center py-3 px-4 font-semibold text-pink-700">Diseño</th>
                <th className="text-center py-3 px-4 font-semibold text-yellow-700">A Priorizar</th>
                <th className="text-center py-3 px-4 font-semibold text-orange-700">Boca Backlog</th>
                <th className="text-center py-3 px-4 font-semibold text-red-700">Cancelados</th>
                <th className="text-center py-3 px-4 font-semibold text-gray-700">Otros</th>
                <th className="text-center py-3 px-4 font-semibold text-gray-700">% Completado</th>
              </tr>
            </thead>
            <tbody>
              {regionalMatrix.map(row => (
                <tr key={row.country} className="border-b border-gray-100 hover:bg-gray-50">
                  <td className="py-3 px-4 font-medium text-gray-800">{row.name}</td>
                  <td className="text-center py-3 px-4 font-semibold text-gray-800">{row.total}</td>
                  <td className="text-center py-3 px-4 text-green-600 font-semibold">{row.completados}</td>
                  <td className="text-center py-3 px-4 text-blue-600 font-semibold">{row.enProceso}</td>
                  <td className="text-center py-3 px-4 text-purple-600 font-semibold">{row.enAprobacion}</td>
                  <td className="text-center py-3 px-4 text-pink-600 font-semibold">{row.enDiseno}</td>
                  <td className="text-center py-3 px-4 text-yellow-600 font-semibold">{row.aPriorizar}</td>
                  <td className="text-center py-3 px-4 text-orange-600 font-semibold">{row.bocaBacklog}</td>
                  <td className="text-center py-3 px-4 text-red-600 font-semibold">{row.cancelados}</td>
                  <td className="text-center py-3 px-4 text-gray-600 font-semibold">{row.otros}</td>
                  <td className="text-center py-3 px-4">
                    <div className="flex items-center justify-center space-x-2">
                      <div className="w-16 h-2 bg-gray-200 rounded-full">
                        <div 
                          className="h-2 bg-green-500 rounded-full transition-all duration-300"
                          style={{ width: `${row.porcentaje}%` }}
                        ></div>
                      </div>
                      <span className="text-sm font-semibold">{row.porcentaje}%</span>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Gráficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Distribución por Estados</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={statesChart}
                cx="50%"
                cy="50%"
                outerRadius={100}
                dataKey="value"
                label={({ name, value, percent }) => `${name}: ${value} (${(percent * 100).toFixed(0)}%)`}
              >
                {statesChart.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>

        <div className="bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Top 10 Épicas - Análisis Detallado</h3>
          <div className="space-y-4">
            {epicsChart.map((epic, index) => (
              <div key={epic.name} className="bg-gray-50 rounded-lg p-4">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex-1">
                    <h4 className="font-semibold text-gray-800 text-sm truncate" title={epic.name}>
                      #{index + 1}. {epic.name}
                    </h4>
                    <div className="flex items-center gap-4 mt-1 text-xs text-gray-600">
                      <span>{epic.total} tickets total</span>
                      <span className="text-green-600">{epic.finalizados} finalizados</span>
                      <span className="text-blue-600">{epic.enProceso} en proceso</span>
                      {epic.otros > 0 && <span className="text-gray-500">{epic.otros} otros</span>}
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-lg font-bold text-gray-800">{epic.completionRate}%</div>
                    <div className="text-xs text-gray-500">completado</div>
                  </div>
                </div>
                
                <div className="w-full bg-gray-200 rounded-full h-6 relative overflow-hidden">
                  <div 
                    className="absolute left-0 top-0 h-full bg-green-500 transition-all duration-300"
                    style={{ width: `${(epic.finalizados / epic.total) * 100}%` }}
                  ></div>
                  <div 
                    className="absolute top-0 h-full bg-blue-500 transition-all duration-300"
                    style={{ 
                      left: `${(epic.finalizados / epic.total) * 100}%`,
                      width: `${(epic.enProceso / epic.total) * 100}%`
                    }}
                  ></div>
                  {epic.otros > 0 && (
                    <div 
                      className="absolute top-0 h-full bg-gray-400 transition-all duration-300"
                      style={{ 
                        left: `${((epic.finalizados + epic.enProceso) / epic.total) * 100}%`,
                        width: `${(epic.otros / epic.total) * 100}%`
                      }}
                    ></div>
                  )}
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-white text-sm font-semibold drop-shadow-lg">
                      {epic.finalizados}/{epic.total}
                    </span>
                  </div>
                </div>
                
                <div className="flex justify-center gap-6 mt-2 text-xs">
                  <div className="flex items-center gap-1">
                    <div className="w-3 h-3 bg-green-500 rounded"></div>
                    <span>Finalizados</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <div className="w-3 h-3 bg-blue-500 rounded"></div>
                    <span>En Proceso</span>
                  </div>
                  {epic.otros > 0 && (
                    <div className="flex items-center gap-1">
                      <div className="w-3 h-3 bg-gray-400 rounded"></div>
                      <span>Otros</span>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// Módulo de Épicas (ORIGINAL - SIN CAMBIOS)
const EpicasModule = ({ data = [] }) => {
  const [selectedEpic, setSelectedEpic] = useState(null);
  const [drilldownCategory, setDrilldownCategory] = useState(null);

  const epicsAnalysis = useMemo(() => {
    if (!data || !Array.isArray(data) || data.length === 0) return [];

    const epicStats = {};
    
    data.forEach(item => {
      if (!item || !isValidEpic(item.epic)) return;
      
      if (!epicStats[item.epic]) {
        epicStats[item.epic] = {
          epic: item.epic,
          total: 0,
          finalizados: 0,
          enProceso: 0,
          enAprobacion: 0,
          enDiseno: 0,
          aPriorizar: 0,
          bocaBacklog: 0,
          cancelados: 0,
          otros: 0,
          healthScore: 0,
          items: []
        };
      }
      
      const stats = epicStats[item.epic];
      stats.total++;
      stats.items.push(item);
      
      if (STATE_CATEGORIES.finalizados.includes(item.state)) {
        stats.finalizados++;
      } else if (STATE_CATEGORIES.enProceso.includes(item.state)) {
        stats.enProceso++;
      } else if (STATE_CATEGORIES.enAprobacion.includes(item.state)) {
        stats.enAprobacion++;
      } else if (STATE_CATEGORIES.enDiseno.includes(item.state)) {
        stats.enDiseno++;
      } else if (STATE_CATEGORIES.aPriorizar.includes(item.state)) {
        stats.aPriorizar++;
      } else if (STATE_CATEGORIES.bocaBacklog.includes(item.state)) {
        stats.bocaBacklog++;
      } else if (STATE_CATEGORIES.cancelados.includes(item.state)) {
        stats.cancelados++;
      } else {
        stats.otros++;
      }
    });
    
    Object.values(epicStats).forEach(stats => {
      if (stats.total === 0) {
        stats.healthScore = 0;
        return;
      }
      
      const completadosPct = stats.finalizados / stats.total;
      const enProcesoPct = stats.enProceso / stats.total;
      
      let healthScore = completadosPct * 60 + enProcesoPct * 30;
      stats.healthScore = Math.max(0, Math.min(100, Math.round(healthScore)));
    });
    
    return Object.values(epicStats)
      .filter(epic => epic.total > 0)
      .sort((a, b) => b.total - a.total);
  }, [data]);

  const handleCategoryClick = (epic, category) => {
    setSelectedEpic(epic);
    setDrilldownCategory(category);
  };

  if (!data || !Array.isArray(data) || data.length === 0) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <Target className="mx-auto h-16 w-16 text-gray-400 mb-4" />
          <h3 className="text-lg font-semibold text-gray-600">No hay datos disponibles</h3>
        </div>
      </div>
    );
  }

  if (selectedEpic && drilldownCategory) {
    const categoryItems = selectedEpic.items.filter(item => {
      switch(drilldownCategory) {
        case 'finalizados': return STATE_CATEGORIES.finalizados.includes(item.state);
        case 'enProceso': return STATE_CATEGORIES.enProceso.includes(item.state);
        case 'enAprobacion': return STATE_CATEGORIES.enAprobacion.includes(item.state);
        case 'enDiseno': return STATE_CATEGORIES.enDiseno.includes(item.state);
        case 'aPriorizar': return STATE_CATEGORIES.aPriorizar.includes(item.state);
        case 'bocaBacklog': return STATE_CATEGORIES.bocaBacklog.includes(item.state);
        case 'cancelados': return STATE_CATEGORIES.cancelados.includes(item.state);
        case 'otros': {
          const allCategorizedStates = Object.values(STATE_CATEGORIES).flat();
          return !allCategorizedStates.includes(item.state);
        }
        default: return false;
      }
    }).map(item => ({
      key: item.key,
      summary: item.summary,
      state: item.state,
      country: item.country,
      assignee: item.assignee,
      endDate: item.endDate
    }));

    return (
      <div className="space-y-4">
        <div className="bg-white rounded-lg shadow-lg p-4">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-lg font-bold text-gray-800">{selectedEpic.epic}</h2>
              <p className="text-sm text-gray-600">{drilldownCategory} ({categoryItems.length} elementos)</p>
            </div>
            <button
              onClick={() => {setSelectedEpic(null); setDrilldownCategory(null);}}
              className="flex items-center space-x-2 px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors text-sm"
            >
              <ArrowLeft className="h-4 w-4" />
              <span>Volver</span>
            </button>
          </div>

          <TicketViewer
            tickets={categoryItems}
            title={`${selectedEpic.epic} - ${drilldownCategory}`}
            emptyMessage={`No hay elementos en la categoría ${drilldownCategory}`}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="bg-white rounded-lg shadow-lg p-4">
        <h2 className="text-lg font-bold text-gray-800 mb-4">Análisis por Épicas</h2>
        
        <div className="space-y-3 max-h-[70vh] overflow-y-auto">
          {epicsAnalysis.map((epic, index) => (
            <div key={index} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
              <div className="flex items-center justify-between mb-3">
                <div>
                  <h3 className="text-base font-semibold text-gray-800">{epic.epic}</h3>
                  <div className="flex items-center space-x-4 text-xs text-gray-600">
                    <span>{epic.total} proyectos</span>
                    <span>{epic.finalizados} completados ({Math.round((epic.finalizados/epic.total)*100)}%)</span>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2 px-3 py-1 rounded-lg border-2 bg-blue-100 border-blue-300">
                  <span className="font-bold text-blue-800 text-sm">Progreso: {epic.healthScore}%</span>
                </div>
              </div>
              
              <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-2">
                <div 
                  className="bg-green-50 border border-green-200 rounded-lg p-2 text-center cursor-pointer hover:bg-green-100 transition-colors"
                  onClick={() => handleCategoryClick(epic, 'finalizados')}
                >
                  <div className="text-xs font-bold text-green-600">{epic.finalizados}</div>
                  <div className="text-xs font-medium text-green-700">Finalizados</div>
                </div>
                
                <div 
                  className="bg-blue-50 border border-blue-200 rounded-lg p-2 text-center cursor-pointer hover:bg-blue-100 transition-colors"
                  onClick={() => handleCategoryClick(epic, 'enProceso')}
                >
                  <div className="text-xs font-bold text-blue-600">{epic.enProceso}</div>
                  <div className="text-xs font-medium text-blue-700">En Proceso</div>
                </div>
                
                <div 
                  className="bg-purple-50 border border-purple-200 rounded-lg p-2 text-center cursor-pointer hover:bg-purple-100 transition-colors"
                  onClick={() => handleCategoryClick(epic, 'enAprobacion')}
                >
                  <div className="text-xs font-bold text-purple-600">{epic.enAprobacion}</div>
                  <div className="text-xs font-medium text-purple-700">Aprobación</div>
                </div>
                
                <div 
                  className="bg-pink-50 border border-pink-200 rounded-lg p-2 text-center cursor-pointer hover:bg-pink-100 transition-colors"
                  onClick={() => handleCategoryClick(epic, 'enDiseno')}
                >
                  <div className="text-xs font-bold text-pink-600">{epic.enDiseno}</div>
                  <div className="text-xs font-medium text-pink-700">Diseño</div>
                </div>
                
                <div 
                  className="bg-yellow-50 border border-yellow-200 rounded-lg p-2 text-center cursor-pointer hover:bg-yellow-100 transition-colors"
                  onClick={() => handleCategoryClick(epic, 'aPriorizar')}
                >
                  <div className="text-xs font-bold text-yellow-600">{epic.aPriorizar}</div>
                  <div className="text-xs font-medium text-yellow-700">A Priorizar</div>
                </div>
                
                <div 
                  className="bg-orange-50 border border-orange-200 rounded-lg p-2 text-center cursor-pointer hover:bg-orange-100 transition-colors"
                  onClick={() => handleCategoryClick(epic, 'bocaBacklog')}
                >
                  <div className="text-xs font-bold text-orange-600">{epic.bocaBacklog}</div>
                  <div className="text-xs font-medium text-orange-700">Boca Backlog</div>
                </div>
                
                <div 
                  className="bg-gray-50 border border-gray-200 rounded-lg p-2 text-center cursor-pointer hover:bg-gray-100 transition-colors"
                  onClick={() => handleCategoryClick(epic, 'otros')}
                >
                  <div className="text-xs font-bold text-gray-600">{epic.otros}</div>
                  <div className="text-xs font-medium text-gray-700">Otros</div>
                </div>
                
                <div 
                  className="bg-red-50 border border-red-200 rounded-lg p-2 text-center cursor-pointer hover:bg-red-100 transition-colors"
                  onClick={() => handleCategoryClick(epic, 'cancelados')}
                >
                  <div className="text-xs font-bold text-red-600">{epic.cancelados}</div>
                  <div className="text-xs font-medium text-red-700">Cancelados</div>
                </div>
              </div>
              
              <div className="mt-2 text-xs text-gray-500 text-right">
                Total verificado: {epic.finalizados + epic.enProceso + epic.enAprobacion + epic.enDiseno + epic.aPriorizar + epic.bocaBacklog + epic.cancelados + epic.otros} = {epic.total}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Módulo Timeline (ORIGINAL - SIN CAMBIOS)
const TimelineModule = ({ data, timelineFilter }) => {
  const [expandedEpics, setExpandedEpics] = useState(new Set());

  const dateRange = useMemo(() => {
    const today = new Date();
    
    if (timelineFilter) {
      const start = new Date(timelineFilter);
      const end = new Date(start);
      end.setMonth(end.getMonth() + 9);
      return { start, end };
    } else {
      const start = new Date(today);
      const end = new Date(today);
      start.setMonth(start.getMonth() - 6);
      end.setMonth(end.getMonth() + 3);
      return { start, end };
    }
  }, [timelineFilter]);

  const epicTimeline = useMemo(() => {
    const epicData = {};
    
    data.forEach(item => {
      if (!isValidEpic(item.epic)) return;
      
      const itemDates = [
        item.startDate, 
        item.endDate, 
        item.uatStart, 
        item.uatEnd, 
        item.prodDate, 
        item.regulatoryDate
      ].filter(Boolean);
      
      if (itemDates.length === 0) return;
      
      if (!epicData[item.epic]) {
        epicData[item.epic] = {
          epic: item.epic,
          items: [],
          startDate: null,
          endDate: null,
          totalItems: 0,
          completedItems: 0
        };
      }
      
      epicData[item.epic].items.push(item);
      epicData[item.epic].totalItems++;
      
      if (STATE_CATEGORIES.finalizados.includes(item.state)) {
        epicData[item.epic].completedItems++;
      }
      
      const minItemDate = new Date(Math.min(...itemDates));
      const maxItemDate = new Date(Math.max(...itemDates));
      
      if (!epicData[item.epic].startDate || minItemDate < epicData[item.epic].startDate) {
        epicData[item.epic].startDate = minItemDate;
      }
      if (!epicData[item.epic].endDate || maxItemDate > epicData[item.epic].endDate) {
        epicData[item.epic].endDate = maxItemDate;
      }
    });
    
    return Object.values(epicData)
      .filter(epic => epic.startDate && epic.endDate)
      .sort((a, b) => a.startDate - b.startDate);
  }, [data, dateRange]);

  const monthsHeader = useMemo(() => {
    const months = [];
    const current = new Date(dateRange.start);
    
    while (current <= dateRange.end) {
      months.push({
        month: current.toLocaleDateString('es-ES', { month: 'short', year: 'numeric' }),
        date: new Date(current)
      });
      current.setMonth(current.getMonth() + 1);
    }
    
    return months;
  }, [dateRange]);

  const calculateBarPosition = (startDate, endDate) => {
    const totalDuration = dateRange.end - dateRange.start;
    const itemStart = startDate - dateRange.start;
    const itemDuration = endDate - startDate;
    
    const left = (itemStart / totalDuration) * 100;
    const width = (itemDuration / totalDuration) * 100;
    
    return { left: Math.max(0, left), width: Math.min(100 - left, Math.max(1, width)) };
  };

  const toggleEpic = (epicName) => {
    const newExpanded = new Set(expandedEpics);
    if (newExpanded.has(epicName)) {
      newExpanded.delete(epicName);
    } else {
      newExpanded.add(epicName);
    }
    setExpandedEpics(newExpanded);
  };

  const getPhaseColor = (phase) => {
    const colors = {
      'DEV': 'from-blue-400 to-blue-600',
      'UAT': 'from-purple-400 to-purple-600',
      'PROD': 'from-green-400 to-green-600',
      'REG': 'from-orange-400 to-orange-600'
    };
    return colors[phase] || 'from-gray-400 to-gray-600';
  };

  const renderTicketPhases = (ticket) => {
    const phases = [];
    
    if (ticket.startDate && ticket.endDate) {
      phases.push({
        name: 'DEV',
        start: ticket.startDate,
        end: ticket.endDate,
        color: 'DEV'
      });
    }
    
    if (ticket.uatStart && ticket.uatEnd) {
      phases.push({
        name: 'UAT',
        start: ticket.uatStart,
        end: ticket.uatEnd,
        color: 'UAT'
      });
    }
    
    if (ticket.prodDate) {
      phases.push({
        name: 'PROD',
        start: ticket.prodDate,
        end: ticket.prodDate,
        color: 'PROD'
      });
    }
    
    if (ticket.regulatoryDate) {
      phases.push({
        name: 'REG',
        start: ticket.regulatoryDate,
        end: ticket.regulatoryDate,
        color: 'REG'
      });
    }
    
    return phases;
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-xl font-bold text-gray-800">Timeline - Épicas y Tickets</h2>
            <p className="text-sm text-gray-600 mt-1">
              Vista cronológica detallada con fases de desarrollo
            </p>
          </div>
          <div className="flex items-center space-x-4 text-xs">
            <div className="flex items-center space-x-2">
              <div className="w-4 h-2 bg-gradient-to-r from-blue-400 to-blue-600 rounded"></div>
              <span>DEV</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-2 bg-gradient-to-r from-purple-400 to-purple-600 rounded"></div>
              <span>UAT</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-2 bg-gradient-to-r from-green-400 to-green-600 rounded"></div>
              <span>PROD</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-4 h-2 bg-gradient-to-r from-orange-400 to-orange-600 rounded"></div>
              <span>REG</span>
            </div>
          </div>
        </div>

        <div className="mb-4 relative h-12 border-b border-gray-200">
          <div className="absolute left-80 right-0 top-0 h-full flex">
            {monthsHeader.map((month, index) => (
              <div
                key={index}
                className="flex-1 text-center text-sm font-semibold text-gray-700 border-r border-gray-100 py-2"
              >
                {month.month}
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-1 max-h-[70vh] overflow-y-auto">
          {epicTimeline.map((epic, epicIndex) => {
            const isExpanded = expandedEpics.has(epic.epic);
            const { left, width } = calculateBarPosition(epic.startDate, epic.endDate);
            
            return (
              <div key={epicIndex} className="border border-gray-200 rounded-lg">
                <div 
                  className="relative h-12 hover:bg-gray-50 cursor-pointer"
                  onClick={() => toggleEpic(epic.epic)}
                >
                  <div className="absolute left-0 top-0 h-full w-80 flex items-center px-4 text-sm font-medium text-gray-800 border-r border-gray-200 bg-white">
                    <div className="flex items-center space-x-2 w-full">
                      <span className="transform transition-transform duration-200" style={{transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)'}}>
                        ▶
                      </span>
                      <div className="flex-1 truncate" title={epic.epic}>
                        <span className="font-semibold">{epic.epic}</span>
                        <span className="ml-2 text-xs text-gray-500">({epic.totalItems} tickets)</span>
                      </div>
                    </div>
                  </div>
                  <div className="absolute left-80 top-0 h-full right-0">
                    <div 
                      className="relative h-8 mt-2 rounded-lg bg-gradient-to-r from-indigo-400 to-indigo-600 transition-all duration-200"
                      style={{ left: `${left}%`, width: `${width}%` }}
                    >
                      <div className="absolute inset-0 flex items-center justify-between px-2 text-white text-xs font-semibold">
                        <span className="truncate">{epic.completedItems}/{epic.totalItems}</span>
                        <span>{Math.round((epic.completedItems / epic.totalItems) * 100)}%</span>
                      </div>
                    </div>
                  </div>
                </div>

                {isExpanded && (
                  <div className="border-t border-gray-200 bg-gray-50">
                    {epic.items.map((ticket, ticketIndex) => {
                      const phases = renderTicketPhases(ticket);
                      if (phases.length === 0) return null;
                      
                      return (
                        <div key={ticketIndex} className="relative min-h-16 border-b border-gray-100 last:border-b-0 py-2">
                          <div className="absolute left-0 top-0 h-full w-80 flex flex-col justify-center px-8 text-xs text-gray-700 border-r border-gray-200">
                            <div className="flex items-center space-x-2 mb-1">
                              <JiraLink 
                                ticketKey={ticket.key} 
                                className="font-medium hover:text-blue-600"
                              >
                                {ticket.key}
                              </JiraLink>
                              <span className="text-xs px-2 py-1 rounded text-white" style={{backgroundColor: stateColors[ticket.state] || stateColors.default}}>
                                {ticket.state}
                              </span>
                            </div>
                            <div className="text-xs text-gray-500 leading-tight">
                              {ticket.summary || 'Sin resumen disponible'}
                            </div>
                          </div>
                          <div className="absolute left-80 top-0 h-full right-0">
                            {phases.map((phase, phaseIndex) => {
                              const { left: phaseLeft, width: phaseWidth } = calculateBarPosition(phase.start, phase.end);
                              const isPoint = phase.start.getTime() === phase.end.getTime();
                              
                              return (
                                <div 
                                  key={phaseIndex}
                                  className={`absolute h-6 mt-2 rounded transition-all duration-200 ${
                                    isPoint ? 'w-2' : ''
                                  } bg-gradient-to-r ${getPhaseColor(phase.color)}`}
                                  style={{ 
                                    left: `${phaseLeft}%`, 
                                    width: isPoint ? '8px' : `${phaseWidth}%`
                                  }}
                                  title={`${phase.name}: ${phase.start.toLocaleDateString('es-ES')} - ${phase.end.toLocaleDateString('es-ES')}`}
                                >
                                  <div className="absolute inset-0 flex items-center justify-center text-white text-xs font-medium">
                                    {!isPoint && phaseWidth > 5 && phase.name}
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>
            );
          })}
        </div>

        <div className="mt-6 text-sm text-gray-600 pt-4 border-t border-gray-200">
          <div className="flex justify-between items-center">
            <span>
              <span className="font-semibold">{epicTimeline.length}</span> épicas en el período
            </span>
            <span className="text-xs text-gray-500">
              Haz clic en una épica para ver sus tickets y fases detalladas
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

// Módulo de Recursos (ORIGINAL - SIN CAMBIOS)
const RecursosModule = ({ data }) => {
  const [selectedResource, setSelectedResource] = useState(null);

  // Función para obtener el recurso asignado con metodología de prioridades
  const getAssignedResource = (item) => {
    // Prioridad 1: Responsable Dev
    if (item.devResponsible && item.devResponsible.trim() !== '' && item.devResponsible !== '#N/A') {
      return {
        name: item.devResponsible.trim(),
        type: 'Dev',
        priority: 1
      };
    }
    
    // Prioridad 2: Persona asignada
    if (item.assignee && item.assignee.trim() !== '' && item.assignee !== '#N/A') {
      return {
        name: item.assignee.trim(),
        type: 'Assigned',
        priority: 2
      };
    }
    
    return null;
  };

  // Análisis completo de recursos
  const resourceAnalysis = useMemo(() => {
    if (!data || !Array.isArray(data) || data.length === 0) {
      return {
        resources: [],
        unassignedItems: [],
        teamMetrics: {
          totalResources: 0,
          totalAssignedItems: 0,
          unassignedItems: 0,
          avgThroughput: 0
        }
      };
    }

    const resourceStats = {};
    const unassignedItems = [];
    
    data.forEach(item => {
      const resource = getAssignedResource(item);
      
      if (!resource) {
        unassignedItems.push(item);
        return;
      }
      
      if (!resourceStats[resource.name]) {
        resourceStats[resource.name] = {
          name: resource.name,
          type: resource.type,
          totalItems: 0,
          finalizados: 0,
          enProceso: 0,
          atrasados: 0,
          throughput: 0,
          items: []
        };
      }
      
      const stats = resourceStats[resource.name];
      stats.totalItems++;
      stats.items.push(item);
      
      if (STATE_CATEGORIES.finalizados.includes(item.state)) {
        stats.finalizados++;
      } else if (STATE_CATEGORIES.enProceso.includes(item.state)) {
        stats.enProceso++;
      }
      
      const today = new Date();
      if (item.endDate && item.endDate < today && !STATE_CATEGORIES.finalizados.includes(item.state)) {
        stats.atrasados++;
      }
    });

    // Calcular throughput para cada recurso
    Object.values(resourceStats).forEach(stats => {
      stats.throughput = stats.totalItems > 0 ? Math.round((stats.finalizados / stats.totalItems) * 100) : 0;
    });

    const resourceList = Object.values(resourceStats).sort((a, b) => b.totalItems - a.totalItems);
    
    const teamMetrics = {
      totalResources: resourceList.length,
      totalAssignedItems: data.length - unassignedItems.length,
      unassignedItems: unassignedItems.length,
      avgThroughput: resourceList.length > 0 ? Math.round(resourceList.reduce((acc, r) => acc + r.throughput, 0) / resourceList.length) : 0
    };

    return { resources: resourceList, unassignedItems, teamMetrics };
  }, [data]);

  // Vista detallada de recurso individual
  if (selectedResource) {
    const resource = resourceAnalysis.resources.find(r => r.name === selectedResource);
    if (!resource) return null;

    return (
      <div className="space-y-4">
        <div className="bg-white rounded-lg shadow-lg p-4">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-lg font-bold text-gray-800">{resource.name}</h2>
              <div className="flex items-center space-x-4 text-sm text-gray-600">
                <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                  resource.type === 'Dev' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800'
                }`}>
                  {resource.type === 'Dev' ? 'Dev' : 'Assigned'}
                </span>
                <span>{resource.totalItems} proyectos</span>
              </div>
            </div>
            <button
              onClick={() => setSelectedResource(null)}
              className="flex items-center space-x-2 px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors text-sm"
            >
              <ArrowLeft className="h-4 w-4" />
              <span>Volver</span>
            </button>
          </div>

          <div className="space-y-2 max-h-96 overflow-y-auto">
            {resource.items.map((item, index) => (
              <div key={index} className="bg-blue-50 rounded-lg p-3 border-l-4 border-blue-500">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  <div>
                    <p className="text-xs font-medium text-gray-600">Clave</p>
                    <JiraLink ticketKey={item.key} className="font-semibold text-sm" />
                  </div>
                  <div>
                    <p className="text-xs font-medium text-gray-600">Estado</p>
                    <p className="font-semibold text-sm" style={{color: stateColors[item.state] || stateColors.default}}>
                      {item.state}
                    </p>
                  </div>
                  <div>
                    <p className="text-xs font-medium text-gray-600">País</p>
                    <p className="font-semibold text-sm">{countryNames[item.country] || item.country}</p>
                  </div>
                  <div className="md:col-span-3">
                    <p className="text-xs font-medium text-gray-600">Resumen</p>
                    <p className="text-gray-800 text-xs leading-relaxed">{item.summary || 'Sin resumen disponible'}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  // Vista principal del módulo de recursos
  return (
    <div className="space-y-4">
      {/* Metodología de Asignación */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200 p-4">
        <div className="flex items-start space-x-3">
          <Activity className="h-6 w-6 text-blue-600 mt-1" />
          <div className="flex-1">
            <h3 className="font-semibold text-blue-800 mb-2">Metodología de Asignación de Recursos</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div className="bg-white/70 rounded-lg p-3 border border-blue-100">
                <div className="flex items-center space-x-2 mb-2">
                  <div className="w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-xs font-bold">1</div>
                  <span className="font-semibold text-purple-700">Prioridad 1: Responsable Dev</span>
                </div>
                <p className="text-gray-700 text-xs">
                  Se asigna como <strong>Dev</strong> cuando existe un responsable de desarrollo definido
                </p>
                <div className="mt-1 text-xs text-purple-600">
                  {resourceAnalysis.resources.filter(r => r.type === 'Dev').length} recursos clasificados
                </div>
              </div>
              <div className="bg-white/70 rounded-lg p-3 border border-blue-100">
                <div className="flex items-center space-x-2 mb-2">
                  <div className="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-bold">2</div>
                  <span className="font-semibold text-blue-700">Prioridad 2: Persona Asignada</span>
                </div>
                <p className="text-gray-700 text-xs">
                  Se asigna como <strong>Assigned</strong> cuando no hay responsable dev (fallback)
                </p>
                <div className="mt-1 text-xs text-blue-600">
                  {resourceAnalysis.resources.filter(r => r.type === 'Assigned').length} recursos clasificados
                </div>
              </div>
            </div>
            <div className="mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs">
              <strong>Clasificación Automática:</strong> {resourceAnalysis.teamMetrics.totalResources} recursos procesados, 
              {resourceAnalysis.teamMetrics.unassignedItems} elementos sin asignar requieren ownership
            </div>
          </div>
        </div>
      </div>

      {/* Métricas del equipo */}
      <div className="bg-white rounded-lg shadow-lg p-4">
        <h2 className="text-lg font-bold text-gray-800 mb-4">Análisis de Utilización de Recursos</h2>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
          <div className="bg-blue-50 rounded-lg p-3 border-l-4 border-blue-500">
            <div className="text-lg font-bold text-blue-800">{resourceAnalysis.teamMetrics.totalResources}</div>
            <div className="text-xs text-blue-600">Recursos Activos</div>
          </div>
          <div className="bg-green-50 rounded-lg p-3 border-l-4 border-green-500">
            <div className="text-lg font-bold text-green-800">{resourceAnalysis.teamMetrics.totalAssignedItems}</div>
            <div className="text-xs text-green-600">Items Asignados</div>
          </div>
          <div className="bg-yellow-50 rounded-lg p-3 border-l-4 border-yellow-500">
            <div className="text-lg font-bold text-yellow-800">{resourceAnalysis.teamMetrics.unassignedItems}</div>
            <div className="text-xs text-yellow-600">Sin Asignar</div>
          </div>
          <div className="bg-purple-50 rounded-lg p-3 border-l-4 border-purple-500">
            <div className="text-lg font-bold text-purple-800">{resourceAnalysis.teamMetrics.avgThroughput}%</div>
            <div className="text-xs text-purple-600">Throughput Promedio</div>
          </div>
        </div>

        {/* Lista de recursos */}
        {resourceAnalysis.resources.length > 0 ? (
          <div className="space-y-3 max-h-[60vh] overflow-y-auto">
            {resourceAnalysis.resources.map((resource, index) => (
              <div 
                key={index} 
                className="bg-gray-50 rounded-lg p-4 border border-gray-200 cursor-pointer hover:shadow-md transition-all"
                onClick={() => setSelectedResource(resource.name)}
              >
                <div className="flex items-center justify-between mb-3">
                  <div>
                    <h4 className="font-semibold text-gray-800">{resource.name}</h4>
                    <div className="flex items-center space-x-3 text-sm text-gray-600">
                      <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                        resource.type === 'Dev' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800'
                      }`}>
                        {resource.type === 'Dev' ? 'Dev' : 'Assigned'}
                      </span>
                      <span>{resource.totalItems} proyectos</span>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-lg font-bold text-gray-800">{resource.throughput}%</div>
                    <div className="text-xs text-gray-600">Throughput</div>
                  </div>
                </div>

                <div className="grid grid-cols-3 gap-3 text-center">
                  <div>
                    <div className="text-sm font-bold text-green-600">{resource.finalizados}</div>
                    <div className="text-xs text-gray-600">Completados</div>
                  </div>
                  <div>
                    <div className="text-sm font-bold text-blue-600">{resource.enProceso}</div>
                    <div className="text-xs text-gray-600">En Proceso</div>
                  </div>
                  <div>
                    <div className={`text-sm font-bold ${resource.atrasados > 0 ? 'text-red-600' : 'text-gray-400'}`}>
                      {resource.atrasados}
                    </div>
                    <div className="text-xs text-gray-600">Atrasados</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8 text-gray-500">
            <p>No se encontraron recursos asignados</p>
          </div>
        )}

        <div className="mt-4 text-xs text-gray-600 text-center">
          Haz clic en cualquier recurso para ver el detalle completo
        </div>
      </div>
    </div>
  );
};

// Módulo de Riesgos (ORIGINAL - SIN CAMBIOS)
const RiesgosModule = ({ data }) => {
  const riskAnalysis = useMemo(() => {
    const today = new Date();
    // EXCLUIR EXPLÍCITAMENTE LOS ELEMENTOS FINALIZADOS
    const activeItems = data.filter(item => !STATE_CATEGORIES.finalizados.includes(item.state));
    
    const atrasados = activeItems.filter(item => item.endDate && item.endDate < today);
    const sinAsignar = activeItems.filter(item => !item.assignee || item.assignee.trim() === '');
    const altaPrioridad = activeItems.filter(item => ['Highest', 'High'].includes(item.priority));
    const sinFechaVencimiento = activeItems.filter(item => !item.endDate);
    
    // Elementos que vencen en los próximos 7 días
    const proximos7Dias = new Date(today);
    proximos7Dias.setDate(today.getDate() + 7);
    const porVencer = activeItems.filter(item => 
      item.endDate && item.endDate > today && item.endDate <= proximos7Dias
    );

    return {
      elementosActivos: activeItems.length,
      atrasados: atrasados.length,
      sinAsignar: sinAsignar.length,
      altaPrioridad: altaPrioridad.length,
      sinFechaVencimiento: sinFechaVencimiento.length,
      porVencer: porVencer.length,
      atrasadosDetalle: atrasados.map(item => ({
        key: item.key,
        summary: item.summary,
        state: item.state,
        country: item.country,
        assignee: item.assignee,
        endDate: item.endDate
      })),
      porVencerDetalle: porVencer.map(item => ({
        key: item.key,
        summary: item.summary,
        state: item.state,
        country: item.country,
        assignee: item.assignee,
        endDate: item.endDate
      })),
      sinAsignarDetalle: sinAsignar.map(item => ({
        key: item.key,
        summary: item.summary,
        state: item.state,
        country: item.country,
        assignee: item.assignee,
        endDate: item.endDate
      })),
      altaPrioridadDetalle: altaPrioridad.map(item => ({
        key: item.key,
        summary: item.summary,
        state: item.state,
        country: item.country,
        assignee: item.assignee,
        priority: item.priority,
        endDate: item.endDate
      }))
    };
  }, [data]);

  const [selectedRiskCategory, setSelectedRiskCategory] = useState(null);

  if (riskAnalysis.elementosActivos === 0) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <CheckCircle className="mx-auto h-16 w-16 text-green-500 mb-4" />
          <h3 className="text-lg font-semibold text-green-700">Sin riesgos detectados</h3>
          <p className="text-gray-600 mt-2">Todos los elementos están finalizados o no presentan riesgos.</p>
        </div>
      </div>
    );
  }

  if (selectedRiskCategory) {
    let categoryData;
    let categoryTitle;
    let categoryDescription;
    let borderColor;
    let bgColor;

    switch(selectedRiskCategory) {
      case 'atrasados':
        categoryData = riskAnalysis.atrasadosDetalle;
        categoryTitle = 'Elementos Atrasados';
        categoryDescription = 'Proyectos que han superado su fecha de vencimiento';
        borderColor = 'border-red-500';
        bgColor = 'bg-red-50';
        break;
      case 'porVencer':
        categoryData = riskAnalysis.porVencerDetalle;
        categoryTitle = 'Por Vencer (Próximos 7 días)';
        categoryDescription = 'Proyectos que vencen en la próxima semana';
        borderColor = 'border-orange-500';
        bgColor = 'bg-orange-50';
        break;
      case 'sinAsignar':
        categoryData = riskAnalysis.sinAsignarDetalle;
        categoryTitle = 'Sin Asignar';
        categoryDescription = 'Proyectos que no tienen persona asignada';
        borderColor = 'border-yellow-500';
        bgColor = 'bg-yellow-50';
        break;
      case 'altaPrioridad':
        categoryData = riskAnalysis.altaPrioridadDetalle;
        categoryTitle = 'Alta Prioridad';
        categoryDescription = 'Proyectos marcados como alta prioridad';
        borderColor = 'border-purple-500';
        bgColor = 'bg-purple-50';
        break;
      default:
        categoryData = [];
    }

    return (
      <div className="space-y-4">
        <div className="bg-white rounded-lg shadow-lg p-4">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-lg font-bold text-gray-800">{categoryTitle}</h2>
              <p className="text-sm text-gray-600">{categoryDescription} ({categoryData.length} elementos)</p>
            </div>
            <button
              onClick={() => setSelectedRiskCategory(null)}
              className="flex items-center space-x-2 px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors text-sm"
            >
              <ArrowLeft className="h-4 w-4" />
              <span>Volver</span>
            </button>
          </div>

          <TicketViewer
            tickets={categoryData}
            title={categoryTitle}
            showDateField="endDate"
            dateFieldLabel="Fecha Vencimiento"
            emptyMessage={`No hay elementos en la categoría ${categoryTitle.toLowerCase()}`}
            borderColor={borderColor}
            bgColor={bgColor}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="bg-white rounded-lg shadow-lg p-4">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h2 className="text-lg font-bold text-gray-800">Análisis de Riesgos</h2>
            <p className="text-xs text-gray-600">Solo elementos activos (excluye finalizados)</p>
          </div>
          <div className="flex items-center space-x-2 text-xs text-gray-600">
            <AlertTriangle className="h-4 w-4" />
            <span>{riskAnalysis.elementosActivos} elementos activos analizados</span>
          </div>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3 mb-4">
          <div className="bg-blue-50 rounded-lg p-3 border-l-4 border-blue-500">
            <div className="text-lg font-bold text-blue-800">{riskAnalysis.elementosActivos}</div>
            <div className="text-xs text-blue-600">Elementos Activos</div>
          </div>
          
          <div 
            className="bg-red-50 rounded-lg p-3 border-l-4 border-red-500 cursor-pointer hover:bg-red-100 transition-colors"
            onClick={() => setSelectedRiskCategory('atrasados')}
          >
            <div className="text-lg font-bold text-red-800">{riskAnalysis.atrasados}</div>
            <div className="text-xs text-red-600">Atrasados</div>
          </div>
          
          <div 
            className="bg-orange-50 rounded-lg p-3 border-l-4 border-orange-500 cursor-pointer hover:bg-orange-100 transition-colors"
            onClick={() => setSelectedRiskCategory('porVencer')}
          >
            <div className="text-lg font-bold text-orange-800">{riskAnalysis.porVencer}</div>
            <div className="text-xs text-orange-600">Por Vencer (7 días)</div>
          </div>
          
          <div 
            className="bg-yellow-50 rounded-lg p-3 border-l-4 border-yellow-500 cursor-pointer hover:bg-yellow-100 transition-colors"
            onClick={() => setSelectedRiskCategory('sinAsignar')}
          >
            <div className="text-lg font-bold text-yellow-800">{riskAnalysis.sinAsignar}</div>
            <div className="text-xs text-yellow-600">Sin Asignar</div>
          </div>
          
          <div 
            className="bg-purple-50 rounded-lg p-3 border-l-4 border-purple-500 cursor-pointer hover:bg-purple-100 transition-colors"
            onClick={() => setSelectedRiskCategory('altaPrioridad')}
          >
            <div className="text-lg font-bold text-purple-800">{riskAnalysis.altaPrioridad}</div>
            <div className="text-xs text-purple-600">Alta Prioridad</div>
          </div>

          <div className="bg-gray-50 rounded-lg p-3 border-l-4 border-gray-500">
            <div className="text-lg font-bold text-gray-800">{riskAnalysis.sinFechaVencimiento}</div>
            <div className="text-xs text-gray-600">Sin Fecha</div>
          </div>
        </div>

        {/* Matriz de riesgo */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h3 className="text-base font-semibold text-gray-800 mb-3">Resumen de Riesgos</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-semibold text-red-700 mb-2 text-sm">Riesgos Críticos</h4>
              <ul className="space-y-1 text-xs">
                <li className="flex justify-between">
                  <span>Elementos atrasados:</span>
                  <span className="font-semibold text-red-600">{riskAnalysis.atrasados}</span>
                </li>
                <li className="flex justify-between">
                  <span>Por vencer (7 días):</span>
                  <span className="font-semibold text-orange-600">{riskAnalysis.porVencer}</span>
                </li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-yellow-700 mb-2 text-sm">Riesgos Operativos</h4>
              <ul className="space-y-1 text-xs">
                <li className="flex justify-between">
                  <span>Sin asignar:</span>
                  <span className="font-semibold text-yellow-600">{riskAnalysis.sinAsignar}</span>
                </li>
                <li className="flex justify-between">
                  <span>Sin fecha de vencimiento:</span>
                  <span className="font-semibold text-gray-600">{riskAnalysis.sinFechaVencimiento}</span>
                </li>
              </ul>
            </div>
          </div>

          <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
            <div className="flex items-center space-x-2 mb-2">
              <AlertTriangle className="h-4 w-4 text-blue-600" />
              <h4 className="font-semibold text-blue-800 text-sm">Nivel de Riesgo Global</h4>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex-1">
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div 
                    className={`h-3 rounded-full transition-all duration-300 ${
                      (riskAnalysis.atrasados + riskAnalysis.porVencer) / riskAnalysis.elementosActivos > 0.3 
                        ? 'bg-red-500' 
                        : (riskAnalysis.atrasados + riskAnalysis.porVencer) / riskAnalysis.elementosActivos > 0.15
                        ? 'bg-orange-500'
                        : 'bg-green-500'
                    }`}
                    style={{ 
                      width: `${Math.min(100, ((riskAnalysis.atrasados + riskAnalysis.porVencer) / riskAnalysis.elementosActivos) * 100)}%` 
                    }}
                  ></div>
                </div>
              </div>
              <span className="text-xs font-semibold text-gray-700">
                {Math.round(((riskAnalysis.atrasados + riskAnalysis.porVencer) / riskAnalysis.elementosActivos) * 100)}% en riesgo
              </span>
            </div>
          </div>
        </div>

        <div className="text-xs text-gray-600 text-center">
          Haz clic en cualquier métrica para ver el detalle de los elementos
        </div>
      </div>
    </div>
  );
};

// Módulo de Finalizados (ORIGINAL - SIN CAMBIOS)
const FinalizadosModule = ({ data }) => {
  const finalizadosData = useMemo(() => {
    const finalizados = data.filter(item => STATE_CATEGORIES.finalizados.includes(item.state));
    
    const finalizadosConFecha = finalizados.map(item => {
      let finalDate = null;
      if (item.prodDate) finalDate = item.prodDate;
      else if (item.uatEnd) finalDate = item.uatEnd;
      else if (item.endDate) finalDate = item.endDate;
      else finalDate = new Date();
      
      return { 
        key: item.key,
        summary: item.summary,
        state: item.state,
        country: item.country,
        assignee: item.assignee,
        epic: item.epic,
        finalDate 
      };
    });
    
    const finalizadosOrdenados = finalizadosConFecha.sort((a, b) => {
      return new Date(b.finalDate) - new Date(a.finalDate);
    });
    
    return {
      finalizados: finalizadosOrdenados,
      totalCompletados: finalizadosConFecha.length
    };
  }, [data]);

  return (
    <div className="space-y-4">
      <div className="bg-green-50 rounded-lg p-3 border-l-4 border-green-500">
        <div className="text-lg font-bold text-green-800">{finalizadosData.totalCompletados}</div>
        <div className="text-xs text-green-600">Total Completados</div>
      </div>

      <div className="bg-white rounded-lg shadow-lg p-4">
        <h3 className="text-base font-semibold text-gray-800 mb-3">Lista de Completados</h3>
        <TicketViewer
          tickets={finalizadosData.finalizados}
          title="Proyectos Completados"
          showDateField="finalDate"
          dateFieldLabel="Fecha Completado"
          emptyMessage="No hay proyectos completados"
          borderColor="border-green-500"
          bgColor="bg-green-50"
        />
      </div>
    </div>
  );
};

// Módulo de Resultados por Mes (ORIGINAL - SIN CAMBIOS)
const ResultadosPorMesModule = ({ data }) => {
  const [selectedMonth, setSelectedMonth] = useState(null);
  const [selectedView, setSelectedView] = useState('finalizados');

  const monthlyResults = useMemo(() => {
    const monthlyData = {};
    const today = new Date();
    
    for (let i = 11; i >= 0; i--) {
      const date = new Date(today.getFullYear(), today.getMonth() - i, 1);
      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
      const monthName = date.toLocaleDateString('es-ES', { month: 'long', year: 'numeric' });
      
      monthlyData[monthKey] = {
        month: monthName,
        date: date,
        finalizados: [],
        enProceso: [],
        totalFinalizados: 0,
        totalEnProceso: 0
      };
    }

    data.forEach(item => {
      if (STATE_CATEGORIES.finalizados.includes(item.state)) {
        let finalDate = null;
        if (item.prodDate) finalDate = item.prodDate;
        else if (item.uatEnd) finalDate = item.uatEnd;
        else if (item.endDate) finalDate = item.endDate;
        
        if (finalDate && finalDate.getFullYear() > 1900) {
          const monthKey = `${finalDate.getFullYear()}-${String(finalDate.getMonth() + 1).padStart(2, '0')}`;
          if (monthlyData[monthKey]) {
            monthlyData[monthKey].finalizados.push({...item, finalDate});
            monthlyData[monthKey].totalFinalizados++;
          }
        }
      }

      if (!STATE_CATEGORIES.finalizados.includes(item.state)) {
        Object.entries(monthlyData).forEach(([monthKey, monthInfo]) => {
          const monthStart = new Date(monthInfo.date);
          const monthEnd = new Date(monthStart.getFullYear(), monthStart.getMonth() + 1, 0);
          
          let wasInProcess = false;
          
          if (item.startDate && item.endDate) {
            if (item.startDate <= monthEnd && item.endDate >= monthStart) {
              wasInProcess = true;
            }
          }
          
          if (!wasInProcess && item.uatStart && item.uatEnd) {
            if (item.uatStart <= monthEnd && item.uatEnd >= monthStart) {
              wasInProcess = true;
            }
          }
          
          if (!wasInProcess && item.prodDate) {
            if (item.prodDate >= monthStart && item.prodDate <= monthEnd) {
              wasInProcess = true;
            }
          }
          
          if (wasInProcess) {
            const alreadyAdded = monthInfo.enProceso.some(existing => existing.key === item.key);
            if (!alreadyAdded) {
              monthInfo.enProceso.push(item);
              monthInfo.totalEnProceso++;
            }
          }
        });
      }
    });

    return Object.entries(monthlyData)
      .map(([key, data]) => ({ key, ...data }))
      .sort((a, b) => b.date - a.date);
  }, [data]);

  const chartData = useMemo(() => {
    return monthlyResults.map(month => ({
      name: month.month.substring(0, 7),
      finalizados: month.totalFinalizados,
      enProceso: month.totalEnProceso,
      fullName: month.month
    })).reverse();
  }, [monthlyResults]);

  const totals = useMemo(() => {
    return monthlyResults.reduce((acc, month) => ({
      finalizados: acc.finalizados + month.totalFinalizados,
      enProceso: acc.enProceso + month.totalEnProceso
    }), { finalizados: 0, enProceso: 0 });
  }, [monthlyResults]);

  if (selectedMonth) {
    const items = selectedView === 'finalizados' ? selectedMonth.finalizados : selectedMonth.enProceso;
    const viewColors = selectedView === 'finalizados' 
      ? { border: 'border-green-500', bg: 'bg-green-50' }
      : { border: 'border-blue-500', bg: 'bg-blue-50' };
    
    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-xl font-bold text-gray-800">{selectedMonth.month}</h2>
              <p className="text-gray-600">
                {selectedView === 'finalizados' ? 'Proyectos Finalizados' : 'Proyectos en Proceso'} 
                ({items.length} elementos)
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex bg-gray-100 rounded-lg p-1">
                <button
                  onClick={() => setSelectedView('finalizados')}
                  className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                    selectedView === 'finalizados'
                      ? 'bg-white text-green-700 shadow-sm'
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  Finalizados ({selectedMonth.totalFinalizados})
                </button>
                <button
                  onClick={() => setSelectedView('enProceso')}
                  className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                    selectedView === 'enProceso'
                      ? 'bg-white text-blue-700 shadow-sm'
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  En Proceso ({selectedMonth.totalEnProceso})
                </button>
              </div>
              <button
                onClick={() => setSelectedMonth(null)}
                className="flex items-center space-x-2 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
              >
                <ArrowLeft className="h-4 w-4" />
                <span>Volver</span>
              </button>
            </div>
          </div>

          <TicketViewer
            tickets={items}
            title={`${selectedView === 'finalizados' ? 'Proyectos Finalizados' : 'Proyectos en Proceso'} - ${selectedMonth.month}`}
            showDateField={selectedView === 'finalizados' ? 'finalDate' : null}
            dateFieldLabel={selectedView === 'finalizados' ? 'Fecha Finalización' : 'Fecha'}
            emptyMessage={`No hay proyectos ${selectedView === 'finalizados' ? 'finalizados' : 'en proceso'} en este mes`}
            borderColor={viewColors.border}
            bgColor={viewColors.bg}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="bg-green-50 rounded-lg p-4 border-l-4 border-green-500">
          <div className="text-2xl font-bold text-green-800">{totals.finalizados}</div>
          <div className="text-sm text-green-600">Total Finalizados (12 meses)</div>
        </div>
        <div className="bg-blue-50 rounded-lg p-4 border-l-4 border-blue-500">
          <div className="text-2xl font-bold text-blue-800">{totals.enProceso}</div>
          <div className="text-sm text-blue-600">Promedio En Proceso</div>
        </div>
        <div className="bg-purple-50 rounded-lg p-4 border-l-4 border-purple-500">
          <div className="text-2xl font-bold text-purple-800">
            {monthlyResults.length > 0 ? Math.round(totals.finalizados / monthlyResults.length) : 0}
          </div>
          <div className="text-sm text-purple-600">Promedio Finalización/Mes</div>
        </div>
        <div className="bg-orange-50 rounded-lg p-4 border-l-4 border-orange-500">
          <div className="text-2xl font-bold text-orange-800">
            {totals.finalizados > 0 ? Math.round((totals.finalizados / (totals.finalizados + totals.enProceso)) * 100) : 0}%
          </div>
          <div className="text-sm text-orange-600">Tasa de Finalización</div>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">Evolución Mensual</h3>
        <ResponsiveContainer width="100%" height={300}>
          <AreaChart data={chartData}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip 
              labelFormatter={(label, payload) => {
                const item = chartData.find(d => d.name === label);
                return item ? item.fullName : label;
              }}
            />
            <Area 
              type="monotone" 
              dataKey="finalizados" 
              stackId="1"
              stroke="#10B981" 
              fill="#10B981" 
              fillOpacity={0.6}
              name="Finalizados"
            />
            <Area 
              type="monotone" 
              dataKey="enProceso" 
              stackId="1"
              stroke="#3B82F6" 
              fill="#3B82F6" 
              fillOpacity={0.6}
              name="En Proceso"
            />
          </AreaChart>
        </ResponsiveContainer>
      </div>

      <div className="bg-white rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">Resultados por Mes</h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Mes</th>
                <th className="text-center py-3 px-4 font-semibold text-gray-700">Finalizados</th>
                <th className="text-center py-3 px-4 font-semibold text-gray-700">En Proceso</th>
                <th className="text-center py-3 px-4 font-semibold text-gray-700">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {monthlyResults.map((month, index) => (
                <tr key={index} className="border-b border-gray-100 hover:bg-gray-50">
                  <td className="py-3 px-4 font-medium text-gray-800">{month.month}</td>
                  <td className="text-center py-3 px-4">
                    <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-sm font-semibold">
                      {month.totalFinalizados}
                    </span>
                  </td>
                  <td className="text-center py-3 px-4">
                    <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm font-semibold">
                      {month.totalEnProceso}
                    </span>
                  </td>
                  <td className="text-center py-3 px-4">
                    <button
                      onClick={() => setSelectedMonth(month)}
                      className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                      disabled={month.totalFinalizados === 0 && month.totalEnProceso === 0}
                    >
                      Ver detalles
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

// ===============================
// MÓDULO DE SCORING INTELIGENTE (NUEVO)
// ===============================

const ScoringModule = ({ data }) => {
  const [showFormulaExplanation, setShowFormulaExplanation] = useState(false);

  // Procesar datos con scoring
  const processedData = useMemo(() => {
    return data.map((item, index) => {
      // Crear un objeto compatible con el formato esperado por el scoring
      const scoringItem = {
        'Valoración prioridad Negocio': item.businessPriority,
        'Valoración Prioridad Tecnología': item.technologyPriority,
        'Sizing': item.sizing,
        'Estado': item.state,
        'Clave': item.key,
        'Resumen': item.summary,
        'Responsable Dev': item.devResponsible,
        'PAIS_BM': item.country
      };
      
      return {
        ...item,
        intelligentScore: ScoringUtils.calculateIntelligentScore(scoringItem),
        originalIndex: index
      };
    });
  }, [data]);

  // Datos filtrados y ordenados - EXCLUSIÓN MÁS AGRESIVA
  const filteredData = useMemo(() => {
    // EXCLUSIÓN DIRECTA EN EL COMPONENTE - sin usar utilidades
    const ESTADOS_PROHIBIDOS = [
      'DEV', 'UAT', 'ANALISIS', 'Pase Produccion', 'DONE', 'Completado', 
      'Finalizada', 'Completada', 'En curso', 'En pausa', 'En planificacion-analisis', 
      'En implementación', 'En Planificación', 'Cancelada', 'Analizada - Descartada', 'Duplicada'
    ];
    
    const dataFiltrada = processedData.filter(item => {
      if (!item || !item.state) {
        console.log('Item sin estado:', item);
        return false;
      }
      
      const estadoExcluido = ESTADOS_PROHIBIDOS.includes(item.state);
      if (estadoExcluido) {
        console.log('EXCLUIDO:', item.key, 'Estado:', item.state);
      }
      return !estadoExcluido;
    });
    
    console.log('Total items procesados:', processedData.length);
    console.log('Items después de filtrado:', dataFiltrada.length);
    console.log('Estados únicos restantes:', [...new Set(dataFiltrada.map(i => i.state))]);
    
    return dataFiltrada
      .sort((a, b) => (b.intelligentScore || 0) - (a.intelligentScore || 0))
      .map((item, index) => ({
        ...item,
        rank: index + 1
      }));
  }, [processedData]);

  // Estadísticas
  const stats = useMemo(() => {
    const baseStats = ScoringUtils.getProjectStats(processedData);
    return {
      ...baseStats,
      showing: filteredData.length,
      avgScore: filteredData.length > 0 
        ? Math.round(filteredData.reduce((sum, item) => sum + (item.intelligentScore || 0), 0) / filteredData.length)
        : 0
    };
  }, [processedData, filteredData]);

  // Funciones auxiliares para colores
  const getScoreClass = (score) => {
    if (score >= 80) return 'bg-red-100 text-red-800';
    if (score >= 60) return 'bg-yellow-100 text-yellow-800';
    return 'bg-green-100 text-green-800';
  };

  const getStateClass = (estado) => {
    if (['PRIORIZAR', 'Highest', 'Prioridad 1'].includes(estado)) {
      return 'bg-red-100 text-red-800';
    }
    if (['APROBACION DISEÑO TECNICO', 'Aprobacion Diseño Negocio'].includes(estado)) {
      return 'bg-yellow-100 text-yellow-800';
    }
    return 'bg-blue-100 text-blue-800';
  };

  const exportResults = () => {
    const csvData = filteredData.map(item => ({
      Rank: item.rank,
      Score: item.intelligentScore,
      Clave: item.key,
      Resumen: item.summary,
      Estado: item.state,
      Sizing: item.sizing,
      'Prioridad Negocio': item.businessPriority,
      'Prioridad Tecnología': item.technologyPriority,
      'Responsable Dev': item.devResponsible,
      'País': item.country
    }));
    
    const csv = Papa.unparse(csvData);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `scoring-multimoney-${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
  };

  return (
    <div className="space-y-6">
      {/* Header con estadísticas */}
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
            <div>
              <h2 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                <Zap className="h-5 w-5 text-indigo-600" />
                Scoring Inteligente MultiMoney
              </h2>
              <p className="text-gray-600 mt-1">
                Algoritmo multifactor: Negocio (40%) + Tecnología (25%) + Sizing (20%) + Estado (15%)
              </p>
            </div>
            
            <div className="flex items-center gap-2">
              <button
                onClick={() => setShowFormulaExplanation(!showFormulaExplanation)}
                className="bg-indigo-100 text-indigo-700 px-3 py-2 rounded-lg hover:bg-indigo-200 transition-colors flex items-center gap-2 text-sm"
              >
                <Info className="h-4 w-4" />
                {showFormulaExplanation ? 'Ocultar' : 'Ver'} Fórmula
              </button>
              
              <button
                onClick={exportResults}
                className="bg-green-100 text-green-700 px-3 py-2 rounded-lg hover:bg-green-200 transition-colors flex items-center gap-2 text-sm"
              >
                <Download className="h-4 w-4" />
                Exportar
              </button>
            </div>
          </div>
        </div>

        {/* Estadísticas */}
        <div className="p-6">
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            {[
              { label: 'Total', value: stats.total, color: 'blue', icon: BarChart3 },
              { label: 'Mostrando', value: stats.showing, color: 'green', icon: Zap },
              { label: 'Proceso/Aprobación', value: stats.processApproval, color: 'purple', icon: RefreshCw },
              { label: 'Score Promedio', value: stats.avgScore, color: 'orange', icon: BarChart3 },
              { label: 'Finalizados', value: stats.finalized, color: 'gray', icon: FileText }
            ].map((stat, index) => (
              <div key={index} className="bg-white rounded-lg shadow p-4 border">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-xs font-medium text-gray-600">{stat.label}</p>
                    <p className="text-2xl font-bold text-gray-900">{stat.value}</p>
                  </div>
                  <stat.icon className={`h-6 w-6 text-${stat.color}-600`} />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Explicación de fórmula */}
      {showFormulaExplanation && (
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-6 bg-gradient-to-r from-indigo-50 to-blue-50 border-b">
            <h3 className="text-xl font-bold text-indigo-900 mb-6">
              Fórmula de Scoring MultiMoney
            </h3>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <div className="space-y-4">
                <div className="bg-white rounded-lg p-4 shadow-sm">
                  <h4 className="font-bold text-indigo-800 mb-3">Negocio (40%)</h4>
                  <div className="space-y-2 text-sm">
                    {Object.entries(SCORING_CONFIG.businessValues).map(([key, value]) => (
                      <div key={key} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                        <span><strong>{key}</strong></span>
                        <span className="bg-indigo-100 px-2 py-1 rounded text-indigo-800 font-bold">{value} pts</span>
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="bg-white rounded-lg p-4 shadow-sm">
                  <h4 className="font-bold text-indigo-800 mb-3">Tecnología (25%)</h4>
                  <div className="space-y-2 text-sm">
                    {Object.entries(SCORING_CONFIG.technologyValues).map(([key, value]) => (
                      <div key={key} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                        <span><strong>{key}</strong></span>
                        <span className="bg-purple-100 px-2 py-1 rounded text-purple-800 font-bold">{value} pts</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div className="bg-white rounded-lg p-4 shadow-sm">
                  <h4 className="font-bold text-indigo-800 mb-3">Sizing (20%)</h4>
                  <div className="space-y-2 text-sm">
                    {Object.entries(SCORING_CONFIG.sizingValues).map(([key, value]) => (
                      <div key={key} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                        <span><strong>{key}</strong></span>
                        <span className="bg-green-100 px-2 py-1 rounded text-green-800 font-bold">{value} pts</span>
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="bg-white rounded-lg p-4 shadow-sm">
                  <h4 className="font-bold text-indigo-800 mb-3">Estado (15%)</h4>
                  <div className="space-y-2 text-sm">
                    {Object.entries(SCORING_CONFIG.stateValues).map(([key, value]) => (
                      <div key={key} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                        <span><strong>{key}</strong></span>
                        <span className="bg-blue-100 px-2 py-1 rounded text-blue-800 font-bold">{value} pts</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            <div className="mt-6 p-4 bg-white rounded-lg border-2 border-indigo-200">
              <h4 className="font-bold text-gray-900 mb-2">Fórmula:</h4>
              <p className="text-lg font-mono text-gray-800 bg-gray-50 p-2 rounded">
                Score = (Negocio × 0.4) + (Tecnología × 0.25) + (Sizing × 0.2) + (Estado × 0.15)
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Tabla de resultados */}
      <div className="bg-white rounded-lg shadow">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Rank</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Score</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Clave</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Resumen</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Estado</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Sizing</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Responsable</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredData.slice(0, 50).map((item, index) => (
                <tr key={`${item.key || ''}-${index}`} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    #{item.rank}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getScoreClass(item.intelligentScore || 0)}`}>
                      {item.intelligentScore || 0}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm">
                    <JiraLink ticketKey={item.key} className="font-medium">
                      {item.key || 'N/A'}
                    </JiraLink>
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-900 max-w-xs">
                    <div className="truncate" title={item.summary || 'Sin descripción'}>
                      {item.summary || 'Sin descripción'}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStateClass(item.state || '')}`}>
                      {item.state || 'N/A'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <span className={`inline-flex items-center px-2 py-1 rounded text-xs font-medium ${
                      ['XS', 'S'].includes(item.sizing) ? 'bg-green-100 text-green-800' :
                      item.sizing === 'M' ? 'bg-yellow-100 text-yellow-800' :
                      ['L', 'XL'].includes(item.sizing) ? 'bg-red-100 text-red-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {item.sizing || 'N/A'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {item.devResponsible || 'N/A'}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Footer */}
        <div className="px-6 py-4 bg-gray-50 border-t">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <div>
              Mostrando {filteredData.length} proyectos MultiMoney ordenados por score
            </div>
            <div className="text-xs text-gray-500">
              Solo elementos pendientes de priorización (excluye en progreso y finalizados)
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// ===============================
// COMPONENTE PRINCIPAL INTEGRADO
// ===============================

const MultimoneySystem = () => {
  const [processedData, setProcessedData] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [loadingMessage, setLoadingMessage] = useState('');
  const [activeModule, setActiveModule] = useState('dashboard');
  const [hasData, setHasData] = useState(false);
  const [error, setError] = useState(null);
  
  const [filters, setFilters] = useState({
    country: '',
    epic: '',
    area: '',
    soloFinalizados: '',
    finalizadosDesde: null,
    timelineDesde: null
  });

  const filteredData = useMemo(() => {
    let filtered = [...processedData];
    
    if (filters.country) {
      filtered = filtered.filter(item => item.country === filters.country);
    }
    
    if (filters.epic) {
      filtered = filtered.filter(item => item.epic === filters.epic);
    }
    
    if (filters.area) {
      filtered = filtered.filter(item => item.area === filters.area);
    }
    
    if (filters.soloFinalizados) {
      switch (filters.soloFinalizados) {
        case 'finalizados':
          filtered = filtered.filter(item => STATE_CATEGORIES.finalizados.includes(item.state));
          break;
        case 'activos':
          // Solo Activos: En Proceso + En Aprobación + En Diseño + A Priorizar + Boca Backlog
          filtered = filtered.filter(item => 
            STATE_CATEGORIES.enProceso.includes(item.state) ||
            STATE_CATEGORIES.enAprobacion.includes(item.state) ||
            STATE_CATEGORIES.enDiseno.includes(item.state) ||
            STATE_CATEGORIES.aPriorizar.includes(item.state) ||
            STATE_CATEGORIES.bocaBacklog.includes(item.state)
          );
          break;
      }
    }
    
    if (filters.finalizadosDesde) {
      filtered = filtered.filter(item => {
        if (!STATE_CATEGORIES.finalizados.includes(item.state)) return true;
        const finalDate = item.prodDate || item.uatEnd;
        return finalDate && finalDate >= filters.finalizadosDesde;
      });
    }
    
    return filtered;
  }, [processedData, filters]);

  const filterOptions = useMemo(() => {
    const countries = [...new Set(processedData.map(item => item.country).filter(c => VALID_COUNTRIES.includes(c)))];
    const areas = identifyRealAreas([...new Set(processedData.map(item => item.area).filter(Boolean))]);
    
    let epicsData = processedData;
    if (filters.area) {
      epicsData = processedData.filter(item => item.area === filters.area);
    }
    const epics = [...new Set(epicsData.map(item => item.epic).filter(isValidEpic))];
    
    return { countries, epics, areas };
  }, [processedData, filters.area]);

  const counts = useMemo(() => {
    const riesgos = filteredData.filter(item => {
      if (STATE_CATEGORIES.finalizados.includes(item.state)) return false;
      const today = new Date();
      return (item.endDate && item.endDate < today) ||
             (['Highest', 'High'].includes(item.priority));
    });
    
    const finalizados = filteredData.filter(item => STATE_CATEGORIES.finalizados.includes(item.state));
    
    const lastMonth = new Date();
    lastMonth.setMonth(lastMonth.getMonth() - 1);
    const resultadosUltimoMes = filteredData.filter(item => {
      if (!STATE_CATEGORIES.finalizados.includes(item.state)) return false;
      const finalDate = item.prodDate || item.uatEnd || item.endDate;
      return finalDate && 
             finalDate.getFullYear() === lastMonth.getFullYear() && 
             finalDate.getMonth() === lastMonth.getMonth();
    });
    
    // Contar recursos únicos
    const uniqueResources = new Set();
    filteredData.forEach(item => {
      if (item.devResponsible && item.devResponsible.trim() !== '' && item.devResponsible !== '#N/A') {
        uniqueResources.add(item.devResponsible.trim());
      } else if (item.assignee && item.assignee.trim() !== '' && item.assignee !== '#N/A') {
        uniqueResources.add(item.assignee.trim());
      }
    });
    
    // Contar elementos elegibles para scoring
    const scoringEligible = ScoringUtils.filterProjectsByCategory(filteredData);
    
    return {
      dashboard: filteredData.length,
      riesgos: riesgos.length,
      finalizados: finalizados.length,
      resultadosmes: resultadosUltimoMes.length,
      recursos: uniqueResources.size,
      scoring: scoringEligible.length
    };
  }, [filteredData]);

  const processCSVData = useCallback((csvData) => {
    return csvData
      .filter(row => row['Clave'] && row['Clave'] !== '#N/A' && row['Clave'].trim() !== '')
      .map(row => ({
        key: row['Clave'] || '',
        summary: row['Resumen'] || '',
        state: row['Estado'] || '',
        country: row['PAIS_BM'] || '',
        epic: row['Epica'] || '',
        assignee: row['Persona asignada'] || '',
        devResponsible: row['Responsable Dev'] || '',
        startDate: parseDate(row['Start date']),
        endDate: parseDate(row['Fecha de vencimiento']),
        uatStart: parseDate(row['Inicio UAT']),
        uatEnd: parseDate(row['Fin UAT']),
        prodDate: parseDate(row['Fecha Pase a prod']),
        regulatoryDate: parseDate(row['Fecha de cumplimiento regulatorio']),
        priority: row['Prioridad'] || '',
        area: row['Area responsable'] || '',
        // Campos adicionales para scoring
        businessPriority: row['Valoración prioridad Negocio'] || '',
        technologyPriority: row['Valoración Prioridad Tecnología'] || '',
        sizing: row['Sizing'] || ''
      }));
  }, []);

  const simulateLoading = useCallback(async () => {
    const stages = [5, 15, 35, 55, 80, 95, 100];
    
    for (const percent of stages) {
      setLoadingProgress(percent);
      await new Promise(resolve => setTimeout(resolve, 300));
    }
  }, []);

  // Función para cargar datos automáticamente desde la URL
  const loadDataFromURL = useCallback(async () => {
    setIsLoading(true);
    setLoadingProgress(0);
    setLoadingMessage('Conectando con el servidor...');
    setError(null);
    
    try {
      // Simular progreso inicial
      setLoadingProgress(10);
      setLoadingMessage('Descargando datos...');
      
      const response = await fetch(CSV_URL);
      if (!response.ok) {
        throw new Error(`Error HTTP: ${response.status}`);
      }
      
      setLoadingProgress(30);
      setLoadingMessage('Procesando archivo CSV...');
      
      const csvText = await response.text();
      
      await simulateLoading();
      
      Papa.parse(csvText, {
        header: true,
        dynamicTyping: true,
        skipEmptyLines: true,
        complete: (results) => {
          const processed = processCSVData(results.data);
          
          console.log("Total de registros procesados:", processed.length);
          console.log("Estados únicos:", [...new Set(processed.map(item => item.state))].filter(Boolean));
          
          setProcessedData(processed);
          setHasData(true);
          setIsLoading(false);
          setLoadingMessage('');
        },
        error: (error) => {
          console.error('Error parsing CSV:', error);
          setError('Error al procesar el archivo CSV');
          setIsLoading(false);
          setLoadingMessage('');
        }
      });
    } catch (error) {
      console.error('Error loading data:', error);
      setError(`Error al cargar los datos: ${error.message}`);
      setIsLoading(false);
      setLoadingMessage('');
    }
  }, [processCSVData, simulateLoading]);

  // Cargar datos automáticamente al montar el componente
  useEffect(() => {
    loadDataFromURL();
  }, [loadDataFromURL]);

  const handleFileUpload = useCallback(async (file) => {
    if (!file || !file.name.toLowerCase().endsWith('.csv')) {
      alert('Por favor selecciona un archivo CSV válido');
      return;
    }
    
    setIsLoading(true);
    setLoadingProgress(0);
    setError(null);
    
    try {
      await simulateLoading();
      
      Papa.parse(file, {
        header: true,
        dynamicTyping: true,
        skipEmptyLines: true,
        complete: (results) => {
          const processed = processCSVData(results.data);
          
          console.log("Total de registros procesados:", processed.length);
          
          setProcessedData(processed);
          setHasData(true);
          setIsLoading(false);
        },
        error: (error) => {
          console.error('Error parsing CSV:', error);
          setError('Error al procesar el archivo CSV');
          setIsLoading(false);
        }
      });
    } catch (error) {
      console.error('Error:', error);
      setError('Error al procesar el archivo');
      setIsLoading(false);
    }
  }, [processCSVData, simulateLoading]);

  const handleDrop = useCallback((e) => {
    e.preventDefault();
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileUpload(files[0]);
    }
  }, [handleFileUpload]);

  const handleDragOver = useCallback((e) => {
    e.preventDefault();
  }, []);

  const exportCSV = useCallback(() => {
    if (filteredData.length === 0) return;
    
    const csvContent = Papa.unparse(filteredData.map(item => ({
      'Clave': item.key,
      'Resumen': item.summary,
      'Estado': item.state,
      'PAIS_BM': item.country,
      'Epica': item.epic,
      'Persona asignada': item.assignee,
      'Responsable Dev': item.devResponsible,
      'Prioridad': item.priority,
      'Area responsable': item.area
    })));
    
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `multimoney-filtrado-${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
  }, [filteredData]);

  const sidebarItems = [
    { id: 'dashboard', icon: BarChart3, label: 'Dashboard', count: counts.dashboard },
    { id: 'ml-insights', icon: Brain, label: 'ML Insights', count: null },
    { id: 'scoring', icon: Zap, label: 'Scoring Inteligente', count: counts.scoring },
    { id: 'epicas', icon: Target, label: 'Épicas', count: null },
    { id: 'timeline', icon: Calendar, label: 'Timeline', count: null },
    { id: 'recursos', icon: Users, label: 'Recursos', count: counts.recursos },
    { id: 'resultadosmes', icon: TrendingUp, label: 'Resultados por Mes', count: counts.resultadosmes },
    { id: 'riesgos', icon: AlertTriangle, label: 'Riesgos', count: counts.riesgos },
    { id: 'finalizados', icon: CheckCircle, label: 'Finalizados', count: counts.finalizados }
  ];

  if (isLoading) {
    return <LoadingProgress progress={loadingProgress} message={loadingMessage} />;
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50 p-6">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-gray-800 mb-4">Sistema MULTIMONEY</h1>
            <div className="bg-white rounded-lg shadow-lg p-8">
              <AlertTriangle className="mx-auto h-16 w-16 text-red-500 mb-4" />
              <h3 className="text-lg font-semibold text-red-800 mb-2">Error al cargar los datos</h3>
              <p className="text-red-600 mb-6">{error}</p>
              <div className="flex gap-4 justify-center">
                <button
                  onClick={loadDataFromURL}
                  className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors"
                >
                  <RefreshCw className="h-4 w-4" />
                  <span>Reintentar</span>
                </button>
                <div className="text-center">
                  <p className="text-gray-600 mb-4">O carga un archivo CSV manualmente:</p>
                  <div
                    className="bg-gray-50 border-2 border-dashed border-gray-300 hover:border-blue-400 rounded-lg p-6 transition-colors"
                    onDrop={handleDrop}
                    onDragOver={handleDragOver}
                  >
                    <Upload className="mx-auto h-12 w-12 text-gray-400 mb-2" />
                    <input
                      type="file"
                      accept=".csv"
                      onChange={(e) => e.target.files?.[0] && handleFileUpload(e.target.files[0])}
                      className="hidden"
                      id="file-input-error"
                    />
                    <label
                      htmlFor="file-input-error"
                      className="inline-block bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg cursor-pointer transition-colors"
                    >
                      Seleccionar archivo
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!hasData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-6">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-gray-800 mb-4">Sistema MULTIMONEY</h1>
            <p className="text-xl text-gray-600">Dashboard de gestión de proyectos con análisis avanzado + Scoring Inteligente</p>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div
              className="bg-white rounded-lg shadow-lg p-8 border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors"
              onDrop={handleDrop}
              onDragOver={handleDragOver}
            >
              <div className="text-center">
                <Upload className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                <h3 className="text-lg font-semibold text-gray-800 mb-2">Cargar archivo CSV</h3>
                <p className="text-gray-600 mb-4">Arrastra tu archivo aquí o haz clic para seleccionar</p>
                <input
                  type="file"
                  accept=".csv"
                  onChange={(e) => e.target.files?.[0] && handleFileUpload(e.target.files[0])}
                  className="hidden"
                  id="file-input"
                />
                <label
                  htmlFor="file-input"
                  className="inline-block bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg cursor-pointer transition-colors"
                >
                  Seleccionar archivo
                </label>
              </div>
            </div>
            
            <div className="bg-white rounded-lg shadow-lg p-8">
              <div className="text-center">
                <Zap className="mx-auto h-16 w-16 text-indigo-500 mb-4" />
                <h3 className="text-lg font-semibold text-gray-800 mb-2">Scoring Inteligente</h3>
                <p className="text-gray-600 mb-4">Algoritmo de priorización multifactor incluido</p>
                <button
                  onClick={loadDataFromURL}
                  className="inline-block bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-lg transition-colors"
                >
                  Cargar Datos Automáticamente
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* BOTÓN RECARGAR DATOS - DISEÑO MEJORADO */}
      <div className="fixed top-6 right-6 z-50">
        <button
          onClick={loadDataFromURL}
          className="group flex items-center space-x-2 px-4 py-2 bg-white hover:bg-blue-50 text-blue-600 hover:text-blue-700 rounded-lg shadow-lg border border-blue-200 hover:border-blue-300 transition-all duration-200 font-medium"
          title="Recargar datos automáticamente desde GitHub"
        >
          <RefreshCw className="h-4 w-4 group-hover:rotate-180 transition-transform duration-500" />
          <span>Recargar</span>
        </button>
      </div>

      <div className="w-64 bg-white shadow-lg border-r border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <h1 className="text-xl font-bold text-gray-800">MULTIMONEY</h1>
          <p className="text-sm text-gray-600">Sistema de Gestión + IA</p>
        </div>
        
        <nav className="p-4">
          <ul className="space-y-2">
            {sidebarItems.map(item => (
              <li key={item.id}>
                <button
                  onClick={() => setActiveModule(item.id)}
                  className={`w-full flex items-center justify-between px-4 py-3 rounded-lg text-left transition-all ${
                    activeModule === item.id
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <item.icon className="h-5 w-5" />
                    <span className="font-medium">{item.label}</span>
                  </div>
                  {item.count !== null && (
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                      activeModule === item.id ? 'bg-blue-200 text-blue-800' : 'bg-gray-200 text-gray-700'
                    }`}>
                      {item.count}
                    </span>
                  )}
                </button>
              </li>
            ))}
          </ul>
        </nav>
      </div>

      <div className="flex-1 overflow-hidden">
        <div className="bg-white shadow-sm border-b border-gray-200 p-6">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
            <div>
              <h2 className="text-2xl font-bold text-gray-800 capitalize">
                {activeModule === 'scoring' ? 'Scoring Inteligente' : activeModule}
              </h2>
              <p className="text-gray-600">
                {activeModule === 'scoring' ? 
                  `${counts.scoring} proyectos elegibles para scoring` : 
                  `${filteredData.length} elementos`}
              </p>
            </div>
            
            <div className="flex flex-wrap items-center gap-4">
              <select
                value={filters.country}
                onChange={(e) => setFilters(prev => ({ ...prev, country: e.target.value }))}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm min-w-[140px]"
              >
                <option value="">Todos los países</option>
                {filterOptions.countries.map(country => (
                  <option key={country} value={country}>{countryNames[country]}</option>
                ))}
              </select>

              <select
                value={filters.soloFinalizados}
                onChange={(e) => setFilters(prev => ({ ...prev, soloFinalizados: e.target.value }))}
                className={`px-4 py-2 border-2 rounded-lg text-sm min-w-[180px] font-medium transition-all ${
                  filters.soloFinalizados 
                    ? 'border-blue-400 bg-blue-50 text-blue-700' 
                    : 'border-gray-300 bg-white text-gray-700 hover:border-blue-300'
                }`}
              >
                <option value="">✓ Todos los estados</option>
                <option value="finalizados">Solo Finalizados</option>
                <option value="activos">Solo Activos (En Proceso, Aprobación, Diseño, Priorizar, Backlog)</option>
              </select>

              <select
                value={filters.epic}
                onChange={(e) => setFilters(prev => ({ ...prev, epic: e.target.value }))}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm min-w-[120px]"
              >
                <option value="">Todas las épicas</option>
                {filterOptions.epics.map(epic => (
                  <option key={epic} value={epic}>{epic}</option>
                ))}
              </select>

              <select
                value={filters.area}
                onChange={(e) => setFilters(prev => ({ ...prev, area: e.target.value }))}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm min-w-[120px]"
              >
                <option value="">Todas las áreas</option>
                {filterOptions.areas.map(area => (
                  <option key={area} value={area}>{area}</option>
                ))}
              </select>

              <button
                onClick={exportCSV}
                className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
              >
                <Download className="h-4 w-4" />
                <span>Exportar</span>
              </button>
            </div>
          </div>

          {/* Tags de filtros activos */}
          {(filters.country || filters.epic || filters.area || filters.soloFinalizados || filters.finalizadosDesde) && (
            <div className="flex flex-wrap gap-2 mt-4">
              {filters.country && (
                <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  País: {countryNames[filters.country]}
                  <button
                    onClick={() => setFilters(prev => ({ ...prev, country: '' }))}
                    className="ml-1 text-blue-600 hover:text-blue-800"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </span>
              )}
              {filters.epic && (
                <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                  Épica: {filters.epic.substring(0, 20)}...
                  <button
                    onClick={() => setFilters(prev => ({ ...prev, epic: '' }))}
                    className="ml-1 text-purple-600 hover:text-purple-800"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </span>
              )}
              {filters.area && (
                <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                  Área: {filters.area}
                  <button
                    onClick={() => setFilters(prev => ({ ...prev, area: '' }))}
                    className="ml-1 text-orange-600 hover:text-orange-800"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </span>
              )}
              {filters.soloFinalizados && (
                <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  Estado: {
                    filters.soloFinalizados === 'finalizados' ? 'Solo Finalizados' :
                    filters.soloFinalizados === 'activos' ? 'Solo Activos' :
                    filters.soloFinalizados
                  }
                  <button
                    onClick={() => setFilters(prev => ({ ...prev, soloFinalizados: '' }))}
                    className="ml-1 text-green-600 hover:text-green-800"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </span>
              )}
            </div>
          )}
        </div>

        <div className="flex-1 overflow-y-auto p-6">
          {activeModule === 'dashboard' && <DashboardModule data={filteredData} />}
          {activeModule === 'ml-insights' && <MLBasicModule data={filteredData} />}
          {activeModule === 'scoring' && <ScoringModule data={filteredData} />}
          {activeModule === 'epicas' && <EpicasModule data={filteredData} />}
          {activeModule === 'timeline' && <TimelineModule data={filteredData} timelineFilter={filters.timelineDesde} />}
          {activeModule === 'recursos' && <RecursosModule data={filteredData} />}
          {activeModule === 'resultadosmes' && <ResultadosPorMesModule data={filteredData} />}
          {activeModule === 'riesgos' && <RiesgosModule data={filteredData} />}
          {activeModule === 'finalizados' && <FinalizadosModule data={filteredData} />}
        </div>
      </div>
    </div>
  );
};

// ===============================
// ALGORITMOS ML BÁSICOS - CHUNK 1
// ===============================
// INSTRUCCIÓN: Pega este código ANTES de "export default MultimoneySystem;"

// Predictor de finalización básico
const BasicCompletionPredictor = {
  predict: (project, historicalData) => {
    // Filtrar proyectos similares
    const similar = historicalData.filter(p => 
      p.sizing === project.sizing && 
      p.country === project.country &&
      STATE_CATEGORIES.finalizados.includes(p.state) &&
      p.startDate && p.endDate
    );

    if (similar.length < 3) {
      return BasicCompletionPredictor.predictBySizing(project);
    }

    const durations = similar.map(p => 
      (p.endDate - p.startDate) / (1000 * 60 * 60 * 24)
    );
    
    const avgDuration = durations.reduce((sum, d) => sum + d, 0) / durations.length;
    const stdDev = Math.sqrt(
      durations.reduce((sum, d) => sum + Math.pow(d - avgDuration, 2), 0) / durations.length
    );

    if (!project.startDate) {
      return {
        avgDuration: Math.round(avgDuration),
        confidence: Math.min(90, similar.length * 15),
        basedOn: similar.length,
        needsStartDate: true
      };
    }

    const predictedEndDate = new Date(
      project.startDate.getTime() + (avgDuration * 24 * 60 * 60 * 1000)
    );

    return {
      predictedEndDate,
      avgDuration: Math.round(avgDuration),
      confidence: Math.min(90, similar.length * 15),
      variance: Math.round(stdDev),
      basedOn: similar.length,
      method: 'similar_projects'
    };
  },

  predictBySizing: (project) => {
    const sizingDurations = {
      'XS': { avg: 7, variance: 3 },
      'S': { avg: 14, variance: 5 },
      'M': { avg: 21, variance: 7 },
      'L': { avg: 35, variance: 10 },
      'XL': { avg: 56, variance: 15 }
    };

    const sizeData = sizingDurations[project.sizing] || sizingDurations['M'];
    
    if (!project.startDate) {
      return {
        avgDuration: sizeData.avg,
        confidence: 60,
        basedOn: 'sizing_average',
        needsStartDate: true
      };
    }

    const predictedEndDate = new Date(
      project.startDate.getTime() + (sizeData.avg * 24 * 60 * 60 * 1000)
    );

    return {
      predictedEndDate,
      avgDuration: sizeData.avg,
      confidence: 60,
      variance: sizeData.variance,
      basedOn: 'sizing_average',
      method: 'sizing_baseline'
    };
  }
};

// ===============================
// CHUNK 2: DETECTOR DE RIESGOS
// ===============================
// INSTRUCCIÓN: Pega este código INMEDIATAMENTE DESPUÉS del Chunk 1

// Detector de riesgos básico
const BasicRiskDetector = {
  analyze: (project, allProjects) => {
    const risks = [];
    let totalScore = 0;

    // Riesgo 1: Sin asignar (+30 pts)
    if (!project.assignee && !project.devResponsible) {
      risks.push({
        factor: 'Sin asignar',
        score: 30,
        level: 'high',
        description: 'Proyecto sin ownership definido'
      });
      totalScore += 30;
    }

    // Riesgo 2: Deadline próximo o pasado
    if (project.endDate) {
      const today = new Date();
      const daysToDeadline = (project.endDate - today) / (1000 * 60 * 60 * 24);
      
      if (daysToDeadline < 0) {
        risks.push({
          factor: 'Proyecto atrasado',
          score: 40,
          level: 'critical',
          description: `${Math.abs(Math.round(daysToDeadline))} días de retraso`
        });
        totalScore += 40;
      } else if (daysToDeadline < 7 && !STATE_CATEGORIES.finalizados.includes(project.state)) {
        risks.push({
          factor: 'Deadline próximo',
          score: 25,
          level: 'high',
          description: `Solo ${Math.round(daysToDeadline)} días para completar`
        });
        totalScore += 25;
      }
    }

    // Riesgo 3: Sizing grande (+15-20 pts)
    if (['L', 'XL'].includes(project.sizing)) {
      const score = project.sizing === 'XL' ? 20 : 15;
      risks.push({
        factor: 'Proyecto complejo',
        score,
        level: 'medium',
        description: `Proyectos ${project.sizing} tienen mayor riesgo de problemas`
      });
      totalScore += score;
    }

    // Riesgo 4: Recurso sobrecargado (+20 pts)
    const assignee = project.assignee || project.devResponsible;
    if (assignee) {
      const assigneeProjects = allProjects.filter(p => 
        (p.assignee === assignee || p.devResponsible === assignee) &&
        !STATE_CATEGORIES.finalizados.includes(p.state) &&
        !STATE_CATEGORIES.cancelados.includes(p.state)
      );

      if (assigneeProjects.length > 5) {
        risks.push({
          factor: 'Recurso sobrecargado',
          score: 20,
          level: 'medium',
          description: `${assignee} tiene ${assigneeProjects.length} proyectos activos`
        });
        totalScore += 20;
      }
    }

    // Determinar nivel de riesgo general
    let riskLevel = 'low';
    if (totalScore > 60) riskLevel = 'critical';
    else if (totalScore > 35) riskLevel = 'high';
    else if (totalScore > 15) riskLevel = 'medium';

    return {
      totalScore: Math.min(100, totalScore),
      level: riskLevel,
      risks,
      recommendations: BasicRiskDetector.generateRecommendations(risks)
    };
  },

  generateRecommendations: (risks) => {
    const recommendations = [];
    
    risks.forEach(risk => {
      switch (risk.factor) {
        case 'Sin asignar':
          recommendations.push('🎯 Asignar inmediatamente a un recurso disponible');
          break;
        case 'Proyecto atrasado':
          recommendations.push('⚠️ Revisar scope y considerar re-priorización urgente');
          break;
        case 'Deadline próximo':
          recommendations.push('⏰ Aumentar foco y recursos en este proyecto');
          break;
        case 'Proyecto complejo':
          recommendations.push('🔧 Considerar dividir en fases más pequeñas');
          break;
        case 'Recurso sobrecargado':
          recommendations.push('👥 Redistribuir carga de trabajo');
          break;
      }
    });

    if (recommendations.length === 0) {
      recommendations.push('✅ Proyecto en buen estado, continuar seguimiento regular');
    }

    return recommendations;
  }
};

// ===============================
// CHUNK 3: ANALIZADOR DE SIMILITUD
// ===============================
// INSTRUCCIÓN: Pega este código INMEDIATAMENTE DESPUÉS del Chunk 2

// Analizador de similitud básico
const BasicSimilarityAnalyzer = {
  findSimilar: (targetProject, allProjects, maxResults = 5) => {
    const similarities = [];

    allProjects.forEach(project => {
      if (project.key === targetProject.key) return;

      let similarity = 0;
      let factors = [];

      // Mismo sizing (+40 puntos de similitud)
      if (project.sizing === targetProject.sizing) {
        similarity += 40;
        factors.push('Mismo sizing');
      }

      // Mismo país (+30 puntos)  
      if (project.country === targetProject.country) {
        similarity += 30;
        factors.push('Mismo país');
      }

      // Misma prioridad de negocio (+20 puntos)
      if (project.businessPriority === targetProject.businessPriority) {
        similarity += 20;
        factors.push('Misma prioridad negocio');
      }

      // Mismo assignee (+15 puntos)
      if ((project.assignee || project.devResponsible) === 
          (targetProject.assignee || targetProject.devResponsible)) {
        similarity += 15;
        factors.push('Mismo recurso');
      }

      // Estado similar (+10 puntos)
      const targetCategory = BasicSimilarityAnalyzer.getStateCategory(targetProject.state);
      const projectCategory = BasicSimilarityAnalyzer.getStateCategory(project.state);
      if (targetCategory === projectCategory) {
        similarity += 10;
        factors.push('Estado similar');
      }

      // Solo incluir si tiene suficiente similitud
      if (similarity > 30) { // Umbral mínimo de similitud
        similarities.push({
          project,
          similarity,
          factors,
          isCompleted: STATE_CATEGORIES.finalizados.includes(project.state)
        });
      }
    });

    return similarities
      .sort((a, b) => b.similarity - a.similarity)
      .slice(0, maxResults);
  },

  getStateCategory: (state) => {
    if (STATE_CATEGORIES.finalizados.includes(state)) return 'completed';
    if (STATE_CATEGORIES.enProceso.includes(state)) return 'in_progress';
    if (STATE_CATEGORIES.enAprobacion.includes(state)) return 'approval';
    if (STATE_CATEGORIES.enDiseno.includes(state)) return 'design';
    if (STATE_CATEGORIES.aPriorizar.includes(state)) return 'to_prioritize';
    return 'other';
  }
};

// ===============================
// CHUNK 4: COMPONENTE PRINCIPAL ML
// ===============================
// INSTRUCCIÓN: Pega este código INMEDIATAMENTE DESPUÉS del Chunk 3

const MLBasicModule = ({ data }) => {
  const [selectedProject, setSelectedProject] = useState(null);
  const [activeTab, setActiveTab] = useState('insights');
  const [mlInsights, setMlInsights] = useState(null);
  
  // Auto-generar insights cuando cambian los datos
  useEffect(() => {
    if (data.length > 10) {
      generateMLInsights();
    }
  }, [data]);

  const generateMLInsights = () => {
    console.log('🧠 Generando insights ML básicos...');
    
    // Filtrar proyectos activos (no finalizados)
    const activeProjects = data.filter(p => !STATE_CATEGORIES.finalizados.includes(p.state));
    
    // Análisis de riesgos para todos los proyectos activos
    const riskAnalysis = activeProjects.map(project => ({
      project,
      risk: BasicRiskDetector.analyze(project, data)
    }));

    // Filtrar proyectos de alto riesgo
    const highRiskProjects = riskAnalysis.filter(r => ['high', 'critical'].includes(r.risk.level));
    
    // Calcular completados recientes (últimos 30 días)
    const last30Days = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    const recentCompletions = data.filter(p => 
      STATE_CATEGORIES.finalizados.includes(p.state) &&
      ((p.prodDate && p.prodDate >= last30Days) || 
       (p.uatEnd && p.uatEnd >= last30Days) || 
       (p.endDate && p.endDate >= last30Days))
    );

    // Generar predicciones para proyectos con fecha de inicio
    const predictions = activeProjects
      .filter(p => p.startDate) // Solo los que tienen fecha de inicio
      .slice(0, 10) // Limitar para performance
      .map(project => ({
        project,
        prediction: BasicCompletionPredictor.predict(project, data)
      }));

    // Guardar insights generados
    setMlInsights({
      totalProjects: data.length,
      activeProjects: activeProjects.length,
      highRiskCount: highRiskProjects.length,
      recentCompletions: recentCompletions.length,
      riskAnalysis: riskAnalysis.slice(0, 20), // Top 20 para performance
      predictions,
      lastUpdated: new Date()
    });
  };

  // Función para analizar un proyecto específico
  const predictProject = (project) => {
    const prediction = BasicCompletionPredictor.predict(project, data);
    const risk = BasicRiskDetector.analyze(project, data);
    const similar = BasicSimilarityAnalyzer.findSimilar(project, data);

    setSelectedProject({
      project,
      prediction,
      risk,
      similar
    });
  };

  // Si no hay suficientes datos o no se han generado insights
  if (!mlInsights) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="text-center">
          <Brain className="h-16 w-16 text-purple-500 mx-auto mb-4 animate-pulse" />
          <h3 className="text-xl font-semibold text-gray-800 mb-2">Inicializando ML...</h3>
          <p className="text-gray-600">
            {data.length < 10 ? 
              `Necesitas al menos 10 proyectos. Tienes ${data.length}.` :
              'Analizando patrones en tus datos...'
            }
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header con estadísticas ML */}
      <div className="bg-gradient-to-r from-purple-50 to-indigo-50 rounded-lg border border-purple-200 p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <Brain className="h-8 w-8 text-purple-600" />
            <div>
              <h3 className="text-xl font-bold text-purple-800">ML Insights Básico ✨</h3>
              <p className="text-purple-600">
                {mlInsights.totalProjects} proyectos analizados
              </p>
            </div>
          </div>
          <button
            onClick={generateMLInsights}
            className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 flex items-center gap-2 text-sm"
          >
            <Zap className="h-4 w-4" />
            Actualizar
          </button>
        </div>

        {/* KPIs ML */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="text-2xl font-bold text-blue-600">{mlInsights.activeProjects}</div>
            <div className="text-sm text-blue-700">Proyectos Activos</div>
          </div>
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="text-2xl font-bold text-red-600">{mlInsights.highRiskCount}</div>
            <div className="text-sm text-red-700">Alto Riesgo</div>
          </div>
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="text-2xl font-bold text-green-600">{mlInsights.recentCompletions}</div>
            <div className="text-sm text-green-700">Completados (30d)</div>
          </div>
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="text-2xl font-bold text-purple-600">{mlInsights.predictions.length}</div>
            <div className="text-sm text-purple-700">Con Predicciones</div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-white rounded-lg shadow-lg">
        <div className="border-b">
          <div className="flex space-x-8 px-6">
            {[
              { id: 'insights', label: 'Insights Generales', icon: Lightbulb },
              { id: 'risks', label: 'Análisis de Riesgos', icon: AlertCircle },
              { id: 'predictions', label: 'Predicciones', icon: Calendar },
              { id: 'project', label: 'Análisis Individual', icon: Target }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-4 px-2 border-b-2 font-medium text-sm flex items-center gap-2 transition-colors ${
                  activeTab === tab.id
                    ? 'border-purple-500 text-purple-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                <tab.icon className="h-4 w-4" />
                {tab.label}
              </button>
            ))}
          </div>
        </div>

        {/* Content Area */}
        <div className="p-6">
          {activeTab === 'insights' && (
            <GeneralInsights insights={mlInsights} />
          )}
          
          {activeTab === 'risks' && (
            <RiskAnalysis risks={mlInsights.riskAnalysis} />
          )}
          
          {activeTab === 'predictions' && (
            <PredictionsView predictions={mlInsights.predictions} />
          )}
          
          {activeTab === 'project' && (
            <ProjectAnalysisView 
              data={data} 
              onSelectProject={predictProject}
              selectedAnalysis={selectedProject}
            />
          )}
        </div>
      </div>
    </div>
  );
};

// ===============================
// CHUNK 5 FINAL: COMPONENTES DE VISTA
// ===============================
// INSTRUCCIÓN: Pega este código INMEDIATAMENTE DESPUÉS del Chunk 4

// Componente: Insights Generales
const GeneralInsights = ({ insights }) => {
  const velocityTrend = insights.recentCompletions > 0 ? 'positive' : 'stable';
  const riskLevel = insights.highRiskCount / insights.activeProjects;
  
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Velocidad del Equipo */}
        <div className="bg-blue-50 rounded-lg p-6 border border-blue-200">
          <div className="flex items-center gap-3 mb-4">
            <TrendingUp className="h-6 w-6 text-blue-600" />
            <h4 className="font-bold text-blue-800">Velocidad del Equipo</h4>
          </div>
          <div className="text-3xl font-bold text-blue-600 mb-2">
            {insights.recentCompletions}
          </div>
          <p className="text-blue-700 text-sm">Proyectos completados últimos 30 días</p>
        </div>

        {/* Salud del Portfolio */}
        <div className={`rounded-lg p-6 border ${
          riskLevel > 0.3 ? 'bg-red-50 border-red-200' : 
          riskLevel > 0.1 ? 'bg-yellow-50 border-yellow-200' : 
          'bg-green-50 border-green-200'
        }`}>
          <div className="flex items-center gap-3 mb-4">
            <AlertCircle className={`h-6 w-6 ${
              riskLevel > 0.3 ? 'text-red-600' : 
              riskLevel > 0.1 ? 'text-yellow-600' : 'text-green-600'
            }`} />
            <h4 className={`font-bold ${
              riskLevel > 0.3 ? 'text-red-800' : 
              riskLevel > 0.1 ? 'text-yellow-800' : 'text-green-800'
            }`}>Salud del Portfolio</h4>
          </div>
          <div className={`text-3xl font-bold mb-2 ${
            riskLevel > 0.3 ? 'text-red-600' : 
            riskLevel > 0.1 ? 'text-yellow-600' : 'text-green-600'
          }`}>
            {Math.round((1 - riskLevel) * 100)}%
          </div>
          <p className={`text-sm ${
            riskLevel > 0.3 ? 'text-red-700' : 
            riskLevel > 0.1 ? 'text-yellow-700' : 'text-green-700'
          }`}>
            {insights.activeProjects - insights.highRiskCount} de {insights.activeProjects} proyectos en buen estado
          </p>
        </div>
      </div>

      {/* Recomendaciones Inteligentes */}
      <div className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg p-6 border border-indigo-200">
        <h4 className="font-bold text-indigo-800 mb-4">🎯 Recomendaciones Inteligentes</h4>
        <div className="space-y-3">
          {insights.highRiskCount > 0 && (
            <div className="flex items-start gap-2">
              <AlertCircle className="h-5 w-5 text-red-500 mt-0.5" />
              <span className="text-sm text-indigo-700">
                <strong>Atención urgente:</strong> {insights.highRiskCount} proyecto(s) en alto riesgo
              </span>
            </div>
          )}
          
          <div className="flex items-start gap-2">
            <Lightbulb className="h-5 w-5 text-blue-500 mt-0.5" />
            <span className="text-sm text-indigo-700">
              <strong>Oportunidad:</strong> {insights.predictions.length} proyectos con predicciones disponibles
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

// Componente: Análisis de Riesgos
const RiskAnalysis = ({ risks }) => {
  const criticalRisks = risks.filter(r => r.risk.level === 'critical');
  const highRisks = risks.filter(r => r.risk.level === 'high');
  
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-red-50 rounded-lg p-4 border border-red-200 text-center">
          <div className="text-2xl font-bold text-red-600">{criticalRisks.length}</div>
          <div className="text-sm text-red-700">Críticos</div>
        </div>
        <div className="bg-orange-50 rounded-lg p-4 border border-orange-200 text-center">
          <div className="text-2xl font-bold text-orange-600">{highRisks.length}</div>
          <div className="text-sm text-orange-700">Alto Riesgo</div>
        </div>
        <div className="bg-green-50 rounded-lg p-4 border border-green-200 text-center">
          <div className="text-2xl font-bold text-green-600">{risks.length - criticalRisks.length - highRisks.length}</div>
          <div className="text-sm text-green-700">Bajo/Medio</div>
        </div>
      </div>

      <div className="space-y-4">
        <h4 className="font-bold text-gray-800">⚠️ Proyectos que Requieren Atención</h4>
        {[...criticalRisks, ...highRisks].slice(0, 10).map((item, index) => (
          <div key={index} className={`rounded-lg p-4 border ${
            item.risk.level === 'critical' ? 'bg-red-50 border-red-200' : 'bg-orange-50 border-orange-200'
          }`}>
            <div className="flex items-center justify-between mb-3">
              <div>
                <span className="font-semibold text-gray-800">{item.project.key}</span>
                <p className="text-sm text-gray-600 truncate">{item.project.summary}</p>
              </div>
              <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                item.risk.level === 'critical' ? 'bg-red-100 text-red-800' : 'bg-orange-100 text-orange-800'
              }`}>
                {item.risk.totalScore} pts
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="text-sm font-medium text-gray-700">Factores de riesgo:</div>
              <div className="flex flex-wrap gap-2">
                {item.risk.risks.map((risk, idx) => (
                  <span key={idx} className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs">
                    {risk.factor} (+{risk.score})
                  </span>
                ))}
              </div>
              
              <div className="text-sm font-medium text-gray-700 mt-3">Recomendaciones:</div>
              <ul className="list-disc list-inside text-sm text-gray-600 space-y-1">
                {item.risk.recommendations.slice(0, 2).map((rec, idx) => (
                  <li key={idx}>{rec}</li>
                ))}
              </ul>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// Componente: Vista de Predicciones
const PredictionsView = ({ predictions }) => {
  const validPredictions = predictions.filter(p => p.prediction.predictedEndDate || p.prediction.avgDuration);
  
  return (
    <div className="space-y-6">
      <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
        <h4 className="font-bold text-purple-800 mb-2">📅 Predicciones de Finalización</h4>
        <p className="text-purple-600 text-sm">
          {validPredictions.length} proyectos con predicciones disponibles
        </p>
      </div>

      <div className="space-y-4">
        {validPredictions.map((item, index) => (
          <div key={index} className="bg-white border border-gray-200 rounded-lg p-4">
            <div className="flex items-center justify-between mb-3">
              <div>
                <span className="font-semibold text-gray-800">{item.project.key}</span>
                <p className="text-sm text-gray-600 truncate max-w-md">{item.project.summary}</p>
              </div>
              <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                item.prediction.confidence > 80 ? 'bg-green-100 text-green-800' :
                item.prediction.confidence > 60 ? 'bg-yellow-100 text-yellow-800' :
                'bg-red-100 text-red-800'
              }`}>
                {item.prediction.confidence}% confianza
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <p className="text-xs font-medium text-gray-600">Fecha Predicha</p>
                <p className="font-semibold text-blue-600">
                  {item.prediction.predictedEndDate ? 
                    item.prediction.predictedEndDate.toLocaleDateString('es-ES') :
                    `${item.prediction.avgDuration} días desde inicio`
                  }
                </p>
              </div>
              
              <div>
                <p className="text-xs font-medium text-gray-600">Basado en</p>
                <p className="text-sm text-gray-700">
                  {typeof item.prediction.basedOn === 'number' ? 
                    `${item.prediction.basedOn} proyectos similares` :
                    item.prediction.basedOn
                  }
                </p>
              </div>
              
              <div>
                <p className="text-xs font-medium text-gray-600">Método</p>
                <p className="text-sm text-gray-700">
                  {item.prediction.method === 'similar_projects' ? 'Proyectos similares' : 'Promedio por tamaño'}
                </p>
              </div>
            </div>
          </div>
        ))}

        {validPredictions.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            <Calendar className="h-12 w-12 mx-auto mb-2 text-gray-400" />
            <p>No hay predicciones disponibles</p>
            <p className="text-sm mt-1">Proyectos necesitan fechas de inicio</p>
          </div>
        )}
      </div>
    </div>
  );
};

// Componente: Vista de Análisis de Proyectos
const ProjectAnalysisView = ({ data, onSelectProject, selectedAnalysis }) => {
  const [searchTerm, setSearchTerm] = useState('');
  
  const filteredProjects = data
    .filter(p => !STATE_CATEGORIES.finalizados.includes(p.state))
    .filter(p => 
      p.key?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      p.summary?.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .slice(0, 20);

  if (selectedAnalysis) {
    return (
      <ProjectDetailedAnalysis 
        analysis={selectedAnalysis} 
        onBack={() => onSelectProject(null)} 
      />
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center gap-4">
        <input
          type="text"
          placeholder="Buscar proyecto..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {filteredProjects.map((project, index) => (
          <div
            key={index}
            onClick={() => onSelectProject(project)}
            className="border border-gray-200 rounded-lg p-4 hover:bg-purple-50 cursor-pointer"
          >
            <div className="flex items-center justify-between mb-2">
              <span className="font-semibold text-purple-700">{project.key}</span>
              <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                {project.state}
              </span>
            </div>
            <p className="text-sm text-gray-600 truncate">{project.summary}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

// Componente: Análisis Detallado de Proyecto
const ProjectDetailedAnalysis = ({ analysis, onBack }) => {
  const { project, prediction, risk } = analysis;
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <button
            onClick={onBack}
            className="p-2 text-gray-500 hover:text-gray-700 rounded-lg hover:bg-gray-100"
          >
            <ArrowLeft className="h-5 w-5" />
          </button>
          <div>
            <h3 className="text-xl font-bold text-gray-800">{project.key}</h3>
            <p className="text-gray-600">{project.summary}</p>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Predicción */}
        <div className="bg-blue-50 rounded-lg p-6 border border-blue-200">
          <h4 className="font-bold text-blue-800 mb-4">📅 Predicción</h4>
          {prediction.predictedEndDate ? (
            <div>
              <div className="text-2xl font-bold text-blue-600 mb-2">
                {prediction.predictedEndDate.toLocaleDateString('es-ES')}
              </div>
              <p className="text-blue-700 text-sm">
                Duración: {prediction.avgDuration} días • Confianza: {prediction.confidence}%
              </p>
            </div>
          ) : (
            <div>
              <div className="text-2xl font-bold text-blue-600 mb-2">
                {prediction.avgDuration} días
              </div>
              <p className="text-blue-700 text-sm">Duración estimada</p>
            </div>
          )}
        </div>

        {/* Riesgo */}
        <div className={`rounded-lg p-6 border ${
          risk.level === 'critical' ? 'bg-red-50 border-red-200' :
          risk.level === 'high' ? 'bg-orange-50 border-orange-200' :
          'bg-green-50 border-green-200'
        }`}>
          <h4 className={`font-bold mb-4 ${
            risk.level === 'critical' ? 'text-red-800' :
            risk.level === 'high' ? 'text-orange-800' :
            'text-green-800'
          }`}>⚠️ Análisis de Riesgo</h4>
          <div className={`text-2xl font-bold mb-2 ${
            risk.level === 'critical' ? 'text-red-600' :
            risk.level === 'high' ? 'text-orange-600' :
            'text-green-600'
          }`}>
            {risk.totalScore}/100
          </div>
          <p className="text-sm capitalize font-medium">Riesgo {risk.level}</p>
        </div>
      </div>

      {/* Recomendaciones */}
      {risk.recommendations.length > 0 && (
        <div className="bg-indigo-50 rounded-lg p-6 border border-indigo-200">
          <h4 className="font-bold text-indigo-800 mb-3">💡 Recomendaciones</h4>
          <ul className="space-y-2">
            {risk.recommendations.map((rec, index) => (
              <li key={index} className="text-sm text-indigo-700">• {rec}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

// ===============================
// 🎉 ¡CÓDIGO ML COMPLETADO!
// ===============================

export default MultimoneySystem;
